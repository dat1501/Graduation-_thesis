
Lora_Smart_Garden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004908  08004908  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004908  08004908  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004908  08004908  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  20000064  08004974  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e8  08004974  000214e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014790  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303c  00000000  00000000  00034860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  000378a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb7  00000000  00000000  00038b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196be  00000000  00000000  00039a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014fed  00000000  00000000  00053105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094779  00000000  00000000  000680f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005184  00000000  00000000  000fc86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001019f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08004810 	.word	0x08004810

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08004810 	.word	0x08004810

08000150 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000150:	b4b0      	push	{r4, r5, r7}
 8000152:	b08f      	sub	sp, #60	; 0x3c
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000158:	f240 13b1 	movw	r3, #433	; 0x1b1
 800015c:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800015e:	2307      	movs	r3, #7
 8000160:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000164:	2307      	movs	r3, #7
 8000166:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800016a:	2301      	movs	r3, #1
 800016c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000170:	23ff      	movs	r3, #255	; 0xff
 8000172:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000176:	2364      	movs	r3, #100	; 0x64
 8000178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 800017c:	2308      	movs	r3, #8
 800017e:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	461d      	mov	r5, r3
 8000184:	f107 040c 	add.w	r4, r7, #12
 8000188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800018a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800018c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800018e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000190:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000194:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	373c      	adds	r7, #60	; 0x3c
 800019c:	46bd      	mov	sp, r7
 800019e:	bcb0      	pop	{r4, r5, r7}
 80001a0:	4770      	bx	lr

080001a2 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80001a2:	b580      	push	{r7, lr}
 80001a4:	b084      	sub	sp, #16
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
 80001aa:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80001ac:	2101      	movs	r1, #1
 80001ae:	6878      	ldr	r0, [r7, #4]
 80001b0:	f000 f99f 	bl	80004f2 <LoRa_read>
 80001b4:	4603      	mov	r3, r0
 80001b6:	73bb      	strb	r3, [r7, #14]
	data = read;
 80001b8:	7bbb      	ldrb	r3, [r7, #14]
 80001ba:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d107      	bne.n	80001d2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0307 	bic.w	r3, r3, #7
 80001c8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2200      	movs	r2, #0
 80001ce:	61da      	str	r2, [r3, #28]
 80001d0:	e03e      	b.n	8000250 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d10c      	bne.n	80001f2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80001d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001dc:	f023 0307 	bic.w	r3, r3, #7
 80001e0:	b25b      	sxtb	r3, r3
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	b25b      	sxtb	r3, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2201      	movs	r2, #1
 80001ee:	61da      	str	r2, [r3, #28]
 80001f0:	e02e      	b.n	8000250 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	2b03      	cmp	r3, #3
 80001f6:	d10c      	bne.n	8000212 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80001f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001fc:	f023 0307 	bic.w	r3, r3, #7
 8000200:	b25b      	sxtb	r3, r3
 8000202:	f043 0303 	orr.w	r3, r3, #3
 8000206:	b25b      	sxtb	r3, r3
 8000208:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2203      	movs	r2, #3
 800020e:	61da      	str	r2, [r3, #28]
 8000210:	e01e      	b.n	8000250 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	2b05      	cmp	r3, #5
 8000216:	d10c      	bne.n	8000232 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800021c:	f023 0307 	bic.w	r3, r3, #7
 8000220:	b25b      	sxtb	r3, r3
 8000222:	f043 0305 	orr.w	r3, r3, #5
 8000226:	b25b      	sxtb	r3, r3
 8000228:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2205      	movs	r2, #5
 800022e:	61da      	str	r2, [r3, #28]
 8000230:	e00e      	b.n	8000250 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2b06      	cmp	r3, #6
 8000236:	d10b      	bne.n	8000250 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	b25b      	sxtb	r3, r3
 8000242:	f043 0306 	orr.w	r3, r3, #6
 8000246:	b25b      	sxtb	r3, r3
 8000248:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2206      	movs	r2, #6
 800024e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	461a      	mov	r2, r3
 8000254:	2101      	movs	r1, #1
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 f965 	bl	8000526 <LoRa_write>
	//HAL_Delay(10);
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	603b      	str	r3, [r7, #0]
 8000270:	4613      	mov	r3, r2
 8000272:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	889b      	ldrh	r3, [r3, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	4619      	mov	r1, r3
 8000280:	f001 fa54 	bl	800172c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	6998      	ldr	r0, [r3, #24]
 8000288:	88fa      	ldrh	r2, [r7, #6]
 800028a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	f001 ffac 	bl	80021ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000294:	bf00      	nop
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fbb1 	bl	8002a02 <HAL_SPI_GetState>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d1f7      	bne.n	8000296 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	6998      	ldr	r0, [r3, #24]
 80002aa:	8b3a      	ldrh	r2, [r7, #24]
 80002ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002b0:	6839      	ldr	r1, [r7, #0]
 80002b2:	f002 f8de 	bl	8002472 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002b6:	bf00      	nop
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 fba0 	bl	8002a02 <HAL_SPI_GetState>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d1f7      	bne.n	80002b8 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	6818      	ldr	r0, [r3, #0]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	889b      	ldrh	r3, [r3, #4]
 80002d0:	2201      	movs	r2, #1
 80002d2:	4619      	mov	r1, r3
 80002d4:	f001 fa2a 	bl	800172c <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	4613      	mov	r3, r2
 80002ee:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	6818      	ldr	r0, [r3, #0]
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	889b      	ldrh	r3, [r3, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	4619      	mov	r1, r3
 80002fc:	f001 fa16 	bl	800172c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	6998      	ldr	r0, [r3, #24]
 8000304:	88fa      	ldrh	r2, [r7, #6]
 8000306:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800030a:	68b9      	ldr	r1, [r7, #8]
 800030c:	f001 ff6e 	bl	80021ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000310:	bf00      	nop
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fb73 	bl	8002a02 <HAL_SPI_GetState>
 800031c:	4603      	mov	r3, r0
 800031e:	2b01      	cmp	r3, #1
 8000320:	d1f7      	bne.n	8000312 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6998      	ldr	r0, [r3, #24]
 8000326:	8b3a      	ldrh	r2, [r7, #24]
 8000328:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800032c:	6839      	ldr	r1, [r7, #0]
 800032e:	f001 ff5d 	bl	80021ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000332:	bf00      	nop
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4618      	mov	r0, r3
 800033a:	f002 fb62 	bl	8002a02 <HAL_SPI_GetState>
 800033e:	4603      	mov	r3, r0
 8000340:	2b01      	cmp	r3, #1
 8000342:	d1f7      	bne.n	8000334 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	889b      	ldrh	r3, [r3, #4]
 800034c:	2201      	movs	r2, #1
 800034e:	4619      	mov	r1, r3
 8000350:	f001 f9ec 	bl	800172c <HAL_GPIO_WritePin>
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	04db      	lsls	r3, r3, #19
 800036a:	115b      	asrs	r3, r3, #5
 800036c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	0c1b      	lsrs	r3, r3, #16
 8000372:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000374:	7afb      	ldrb	r3, [r7, #11]
 8000376:	461a      	mov	r2, r3
 8000378:	2106      	movs	r1, #6
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f000 f8d3 	bl	8000526 <LoRa_write>
	HAL_Delay(5);
 8000380:	2005      	movs	r0, #5
 8000382:	f000 ff4b 	bl	800121c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800038c:	7afb      	ldrb	r3, [r7, #11]
 800038e:	461a      	mov	r2, r3
 8000390:	2107      	movs	r1, #7
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 f8c7 	bl	8000526 <LoRa_write>
	HAL_Delay(5);
 8000398:	2005      	movs	r0, #5
 800039a:	f000 ff3f 	bl	800121c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80003a2:	7afb      	ldrb	r3, [r7, #11]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2108      	movs	r1, #8
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f000 f8bc 	bl	8000526 <LoRa_write>
	HAL_Delay(5);
 80003ae:	2005      	movs	r0, #5
 80003b0:	f000 ff34 	bl	800121c <HAL_Delay>
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	2b0c      	cmp	r3, #12
 80003ca:	dd01      	ble.n	80003d0 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80003cc:	230c      	movs	r3, #12
 80003ce:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	2b06      	cmp	r3, #6
 80003d4:	dc01      	bgt.n	80003da <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80003d6:	2307      	movs	r3, #7
 80003d8:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80003da:	211e      	movs	r1, #30
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f000 f888 	bl	80004f2 <LoRa_read>
 80003e2:	4603      	mov	r3, r0
 80003e4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80003e6:	200a      	movs	r0, #10
 80003e8:	f000 ff18 	bl	800121c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	011b      	lsls	r3, r3, #4
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
 80003f6:	f003 030f 	and.w	r3, r3, #15
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4413      	add	r3, r2
 80003fe:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	461a      	mov	r2, r3
 8000404:	211e      	movs	r1, #30
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 f88d 	bl	8000526 <LoRa_write>
	HAL_Delay(10);
 800040c:	200a      	movs	r0, #10
 800040e:	f000 ff05 	bl	800121c <HAL_Delay>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	460b      	mov	r3, r1
 8000424:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	461a      	mov	r2, r3
 800042a:	2109      	movs	r1, #9
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f000 f87a 	bl	8000526 <LoRa_write>
	HAL_Delay(10);
 8000432:	200a      	movs	r0, #10
 8000434:	f000 fef2 	bl	800121c <HAL_Delay>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	2b2c      	cmp	r3, #44	; 0x2c
 8000454:	d801      	bhi.n	800045a <LoRa_setOCP+0x1a>
		current = 45;
 8000456:	232d      	movs	r3, #45	; 0x2d
 8000458:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800045a:	78fb      	ldrb	r3, [r7, #3]
 800045c:	2bf0      	cmp	r3, #240	; 0xf0
 800045e:	d901      	bls.n	8000464 <LoRa_setOCP+0x24>
		current = 240;
 8000460:	23f0      	movs	r3, #240	; 0xf0
 8000462:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	2b78      	cmp	r3, #120	; 0x78
 8000468:	d809      	bhi.n	800047e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	3b2d      	subs	r3, #45	; 0x2d
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <LoRa_setOCP+0x78>)
 8000470:	fb82 1203 	smull	r1, r2, r2, r3
 8000474:	1052      	asrs	r2, r2, #1
 8000476:	17db      	asrs	r3, r3, #31
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e00b      	b.n	8000496 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	2bf0      	cmp	r3, #240	; 0xf0
 8000482:	d808      	bhi.n	8000496 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	331e      	adds	r3, #30
 8000488:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <LoRa_setOCP+0x78>)
 800048a:	fb82 1203 	smull	r1, r2, r2, r3
 800048e:	1092      	asrs	r2, r2, #2
 8000490:	17db      	asrs	r3, r3, #31
 8000492:	1ad3      	subs	r3, r2, r3
 8000494:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	3320      	adds	r3, #32
 800049a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	461a      	mov	r2, r3
 80004a0:	210b      	movs	r1, #11
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f000 f83f 	bl	8000526 <LoRa_write>
	HAL_Delay(10);
 80004a8:	200a      	movs	r0, #10
 80004aa:	f000 feb7 	bl	800121c <HAL_Delay>
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	66666667 	.word	0x66666667

080004bc <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80004c4:	211e      	movs	r1, #30
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f000 f813 	bl	80004f2 <LoRa_read>
 80004cc:	4603      	mov	r3, r0
 80004ce:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	f043 0307 	orr.w	r3, r3, #7
 80004d6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	461a      	mov	r2, r3
 80004dc:	211e      	movs	r1, #30
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f000 f821 	bl	8000526 <LoRa_write>
	HAL_Delay(10);
 80004e4:	200a      	movs	r0, #10
 80004e6:	f000 fe99 	bl	800121c <HAL_Delay>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af02      	add	r7, sp, #8
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	460b      	mov	r3, r1
 80004fc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80004fe:	78fb      	ldrb	r3, [r7, #3]
 8000500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000504:	b2db      	uxtb	r3, r3
 8000506:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000508:	f107 030f 	add.w	r3, r7, #15
 800050c:	f107 010e 	add.w	r1, r7, #14
 8000510:	2201      	movs	r2, #1
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	2201      	movs	r2, #1
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff fea4 	bl	8000264 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800051c:	7bfb      	ldrb	r3, [r7, #15]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000526:	b580      	push	{r7, lr}
 8000528:	b086      	sub	sp, #24
 800052a:	af02      	add	r7, sp, #8
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	70fb      	strb	r3, [r7, #3]
 8000532:	4613      	mov	r3, r2
 8000534:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000536:	78fb      	ldrb	r3, [r7, #3]
 8000538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800053c:	b2db      	uxtb	r3, r3
 800053e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000540:	78bb      	ldrb	r3, [r7, #2]
 8000542:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000544:	f107 030f 	add.w	r3, r7, #15
 8000548:	f107 010e 	add.w	r1, r7, #14
 800054c:	2201      	movs	r2, #1
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	2201      	movs	r2, #1
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f7ff fec4 	bl	80002e0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	461a      	mov	r2, r3
 800056c:	460b      	mov	r3, r1
 800056e:	72fb      	strb	r3, [r7, #11]
 8000570:	4613      	mov	r3, r2
 8000572:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057a:	b2db      	uxtb	r3, r3
 800057c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	889b      	ldrh	r3, [r3, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f001 f8cf 	bl	800172c <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	6998      	ldr	r0, [r3, #24]
 8000592:	f107 0117 	add.w	r1, r7, #23
 8000596:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800059a:	2201      	movs	r2, #1
 800059c:	f001 fe26 	bl	80021ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005a0:	bf00      	nop
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fa2b 	bl	8002a02 <HAL_SPI_GetState>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d1f7      	bne.n	80005a2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6998      	ldr	r0, [r3, #24]
 80005b6:	7abb      	ldrb	r3, [r7, #10]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	f001 fe14 	bl	80021ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005c4:	bf00      	nop
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fa19 	bl	8002a02 <HAL_SPI_GetState>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d1f7      	bne.n	80005c6 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	889b      	ldrh	r3, [r3, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	f001 f8a3 	bl	800172c <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]

	return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	4611      	mov	r1, r2
 800060e:	461a      	mov	r2, r3
 8000610:	460b      	mov	r3, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800061e:	2101      	movs	r1, #1
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f7ff fdbe 	bl	80001a2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000626:	210e      	movs	r1, #14
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f7ff ff62 	bl	80004f2 <LoRa_read>
 800062e:	4603      	mov	r3, r0
 8000630:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000632:	7cfb      	ldrb	r3, [r7, #19]
 8000634:	461a      	mov	r2, r3
 8000636:	210d      	movs	r1, #13
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f7ff ff74 	bl	8000526 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	461a      	mov	r2, r3
 8000642:	2122      	movs	r1, #34	; 0x22
 8000644:	68f8      	ldr	r0, [r7, #12]
 8000646:	f7ff ff6e 	bl	8000526 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	2100      	movs	r1, #0
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f7ff ff85 	bl	8000560 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000656:	2103      	movs	r1, #3
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f7ff fda2 	bl	80001a2 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800065e:	2112      	movs	r1, #18
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ff46 	bl	80004f2 <LoRa_read>
 8000666:	4603      	mov	r3, r0
 8000668:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800066a:	7cfb      	ldrb	r3, [r7, #19]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	2112      	movs	r1, #18
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f7ff ff54 	bl	8000526 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800067e:	6979      	ldr	r1, [r7, #20]
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff fd8e 	bl	80001a2 <LoRa_gotoMode>
			return 1;
 8000686:	2301      	movs	r3, #1
 8000688:	e00f      	b.n	80006aa <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800068a:	88bb      	ldrh	r3, [r7, #4]
 800068c:	3b01      	subs	r3, #1
 800068e:	80bb      	strh	r3, [r7, #4]
 8000690:	88bb      	ldrh	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d105      	bne.n	80006a2 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000696:	6979      	ldr	r1, [r7, #20]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff fd82 	bl	80001a2 <LoRa_gotoMode>
				return 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	e003      	b.n	80006aa <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fdba 	bl	800121c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80006a8:	e7d9      	b.n	800065e <LoRa_transmit+0x5c>
	}

}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80006ba:	2105      	movs	r1, #5
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fd70 	bl	80001a2 <LoRa_gotoMode>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80006ca:	b590      	push	{r4, r7, lr}
 80006cc:	b089      	sub	sp, #36	; 0x24
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	e007      	b.n	80006f2 <LoRa_receive+0x28>
		data[i]=0;
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	4413      	add	r3, r2
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	3301      	adds	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dbf3      	blt.n	80006e2 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80006fa:	2101      	movs	r1, #1
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff fd50 	bl	80001a2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000702:	2112      	movs	r1, #18
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f7ff fef4 	bl	80004f2 <LoRa_read>
 800070a:	4603      	mov	r3, r0
 800070c:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800070e:	7cfb      	ldrb	r3, [r7, #19]
 8000710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000714:	2b00      	cmp	r3, #0
 8000716:	d02f      	beq.n	8000778 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000718:	22ff      	movs	r2, #255	; 0xff
 800071a:	2112      	movs	r1, #18
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff ff02 	bl	8000526 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000722:	2113      	movs	r1, #19
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff fee4 	bl	80004f2 <LoRa_read>
 800072a:	4603      	mov	r3, r0
 800072c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800072e:	2110      	movs	r1, #16
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff fede 	bl	80004f2 <LoRa_read>
 8000736:	4603      	mov	r3, r0
 8000738:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800073a:	7cfb      	ldrb	r3, [r7, #19]
 800073c:	461a      	mov	r2, r3
 800073e:	210d      	movs	r1, #13
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff fef0 	bl	8000526 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000746:	7cba      	ldrb	r2, [r7, #18]
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4293      	cmp	r3, r2
 800074c:	bf28      	it	cs
 800074e:	4613      	movcs	r3, r2
 8000750:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e00b      	b.n	8000770 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	18d4      	adds	r4, r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff fec6 	bl	80004f2 <LoRa_read>
 8000766:	4603      	mov	r3, r0
 8000768:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	7ffb      	ldrb	r3, [r7, #31]
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	429a      	cmp	r2, r3
 8000776:	dbef      	blt.n	8000758 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000778:	2105      	movs	r1, #5
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff fd11 	bl	80001a2 <LoRa_gotoMode>
    return min;
 8000780:	7ffb      	ldrb	r3, [r7, #31]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}

0800078a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800078a:	b580      	push	{r7, lr}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff2b 	bl	80005ee <LoRa_isvalid>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 8093 	beq.w	80008c6 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80007a0:	2100      	movs	r1, #0
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fcfd 	bl	80001a2 <LoRa_gotoMode>
			HAL_Delay(10);
 80007a8:	200a      	movs	r0, #10
 80007aa:	f000 fd37 	bl	800121c <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80007ae:	2101      	movs	r1, #1
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe9e 	bl	80004f2 <LoRa_read>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80007ba:	200a      	movs	r0, #10
 80007bc:	f000 fd2e 	bl	800121c <HAL_Delay>
			data = read | 0x80;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007c6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	461a      	mov	r2, r3
 80007cc:	2101      	movs	r1, #1
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff fea9 	bl	8000526 <LoRa_write>
			HAL_Delay(100);
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	f000 fd21 	bl	800121c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	4619      	mov	r1, r3
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fdbb 	bl	800035c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff fe13 	bl	800041a <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fe1f 	bl	8000440 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000802:	2223      	movs	r2, #35	; 0x23
 8000804:	210c      	movs	r1, #12
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe8d 	bl	8000526 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fe55 	bl	80004bc <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fdce 	bl	80003bc <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000820:	22ff      	movs	r2, #255	; 0xff
 8000822:	211f      	movs	r1, #31
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff fe7e 	bl	8000526 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	b2da      	uxtb	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	461a      	mov	r2, r3
 800084a:	211d      	movs	r1, #29
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fe6a 	bl	8000526 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000856:	0a1b      	lsrs	r3, r3, #8
 8000858:	b29b      	uxth	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	2120      	movs	r1, #32
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff fe60 	bl	8000526 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	2121      	movs	r1, #33	; 0x21
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fe58 	bl	8000526 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fe3a 	bl	80004f2 <LoRa_read>
 800087e:	4603      	mov	r3, r0
 8000880:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000888:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	461a      	mov	r2, r3
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fe48 	bl	8000526 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000896:	2101      	movs	r1, #1
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fc82 	bl	80001a2 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fcb9 	bl	800121c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80008aa:	2142      	movs	r1, #66	; 0x42
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fe20 	bl	80004f2 <LoRa_read>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b12      	cmp	r3, #18
 80008ba:	d101      	bne.n	80008c0 <LoRa_init+0x136>
				return LORA_OK;
 80008bc:	23c8      	movs	r3, #200	; 0xc8
 80008be:	e004      	b.n	80008ca <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80008c0:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80008c4:	e001      	b.n	80008ca <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80008c6:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <vApplicationGetIdleTaskMemory+0x28>)
 80008e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4a05      	ldr	r2, [pc, #20]	; (8000900 <vApplicationGetIdleTaskMemory+0x2c>)
 80008ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000080 	.word	0x20000080
 8000900:	20000120 	.word	0x20000120

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b0aa      	sub	sp, #168	; 0xa8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t index = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	char *str = "helloworldhehee";
 8000910:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <main+0x168>)
 8000912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fc4f 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f8c5 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f000 f985 	bl	8000c2c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000922:	f000 f923 	bl	8000b6c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000926:	f000 f957 	bl	8000bd8 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 800092a:	f000 f905 	bl	8000b38 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  myLoRa = newLoRa();
 800092e:	4c50      	ldr	r4, [pc, #320]	; (8000a70 <main+0x16c>)
 8000930:	463b      	mov	r3, r7
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc0c 	bl	8000150 <newLoRa>
 8000938:	4625      	mov	r5, r4
 800093a:	463c      	mov	r4, r7
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000948:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 800094c:	4b48      	ldr	r3, [pc, #288]	; (8000a70 <main+0x16c>)
 800094e:	4a49      	ldr	r2, [pc, #292]	; (8000a74 <main+0x170>)
 8000950:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8000952:	4b47      	ldr	r3, [pc, #284]	; (8000a70 <main+0x16c>)
 8000954:	2201      	movs	r2, #1
 8000956:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8000958:	4b45      	ldr	r3, [pc, #276]	; (8000a70 <main+0x16c>)
 800095a:	4a46      	ldr	r2, [pc, #280]	; (8000a74 <main+0x170>)
 800095c:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 800095e:	4b44      	ldr	r3, [pc, #272]	; (8000a70 <main+0x16c>)
 8000960:	2202      	movs	r2, #2
 8000962:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000964:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <main+0x16c>)
 8000966:	4a43      	ldr	r2, [pc, #268]	; (8000a74 <main+0x170>)
 8000968:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 800096a:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <main+0x16c>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000972:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <main+0x16c>)
 8000974:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <main+0x174>)
 8000976:	619a      	str	r2, [r3, #24]

  if(LoRa_init(&myLoRa))
 8000978:	483d      	ldr	r0, [pc, #244]	; (8000a70 <main+0x16c>)
 800097a:	f7ff ff06 	bl	800078a <LoRa_init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <main+0x86>
  {
	  LoraState = 1;
 8000984:	4b3d      	ldr	r3, [pc, #244]	; (8000a7c <main+0x178>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
  }
  LoRa_startReceiving(&myLoRa);
 800098a:	4839      	ldr	r0, [pc, #228]	; (8000a70 <main+0x16c>)
 800098c:	f7ff fe91 	bl	80006b2 <LoRa_startReceiving>
  TxData[0] = LocalAddress;
 8000990:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <main+0x17c>)
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <main+0x180>)
 8000996:	701a      	strb	r2, [r3, #0]
  for(index = 1; index < 10; index++)
 8000998:	2301      	movs	r3, #1
 800099a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800099e:	e00f      	b.n	80009c0 <main+0xbc>
  {
	  TxData[index] = (uint8_t)str[index-1];
 80009a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80009a4:	3b01      	subs	r3, #1
 80009a6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80009aa:	441a      	add	r2, r3
 80009ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80009b0:	7811      	ldrb	r1, [r2, #0]
 80009b2:	4a34      	ldr	r2, [pc, #208]	; (8000a84 <main+0x180>)
 80009b4:	54d1      	strb	r1, [r2, r3]
  for(index = 1; index < 10; index++)
 80009b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80009ba:	3301      	adds	r3, #1
 80009bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80009c0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80009c4:	2b09      	cmp	r3, #9
 80009c6:	d9eb      	bls.n	80009a0 <main+0x9c>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SensorLight */
  osThreadDef(SensorLight, StartSensorLight, osPriorityNormal, 0, 128);
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <main+0x184>)
 80009ca:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80009ce:	461d      	mov	r5, r3
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorLightHandle = osThreadCreate(osThread(SensorLight), NULL);
 80009dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fc58 	bl	8003298 <osThreadCreate>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <main+0x188>)
 80009ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of LoraTransmit */
  osThreadDef(LoraTransmit, StartLoraTransmit, osPriorityNormal, 0, 128);
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <main+0x18c>)
 80009f0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80009f4:	461d      	mov	r5, r3
 80009f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoraTransmitHandle = osThreadCreate(osThread(LoraTransmit), NULL);
 8000a02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fc45 	bl	8003298 <osThreadCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <main+0x190>)
 8000a12:	6013      	str	r3, [r2, #0]

  /* definition and creation of doam */
  osThreadDef(doam, StartGetValueDoAm, osPriorityNormal, 0, 128);
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <main+0x194>)
 8000a16:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000a1a:	461d      	mov	r5, r3
 8000a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  doamHandle = osThreadCreate(osThread(doam), NULL);
 8000a28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fc32 	bl	8003298 <osThreadCreate>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <main+0x198>)
 8000a38:	6013      	str	r3, [r2, #0]

  /* definition and creation of DoamDat */
  osThreadDef(DoamDat, StartGetValueDoAmDat, osPriorityNormal, 0, 128);
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <main+0x19c>)
 8000a3c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000a40:	461d      	mov	r5, r3
 8000a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DoamDatHandle = osThreadCreate(osThread(DoamDat), NULL);
 8000a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 fc1f 	bl	8003298 <osThreadCreate>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <main+0x1a0>)
 8000a5e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a60:	f002 fc13 	bl	800328a <osKernelStart>
//	  __disable_irq();

//	  __enable_irq();

//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RxData[1]);
	  HAL_Delay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 fbd9 	bl	800121c <HAL_Delay>
 8000a6a:	e7fb      	b.n	8000a64 <main+0x160>
 8000a6c:	08004828 	.word	0x08004828
 8000a70:	200003dc 	.word	0x200003dc
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	2000032c 	.word	0x2000032c
 8000a7c:	20000408 	.word	0x20000408
 8000a80:	20000000 	.word	0x20000000
 8000a84:	2000040c 	.word	0x2000040c
 8000a88:	08004844 	.word	0x08004844
 8000a8c:	200003cc 	.word	0x200003cc
 8000a90:	08004870 	.word	0x08004870
 8000a94:	200003d0 	.word	0x200003d0
 8000a98:	08004894 	.word	0x08004894
 8000a9c:	200003d4 	.word	0x200003d4
 8000aa0:	080048b8 	.word	0x080048b8
 8000aa4:	200003d8 	.word	0x200003d8

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 fdd2 	bl	8004660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000aca:	2309      	movs	r3, #9
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 feb5 	bl	8001864 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b00:	f000 f9b4 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f922 	bl	8001d68 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b2a:	f000 f99f 	bl	8000e6c <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3740      	adds	r7, #64	; 0x40
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_IWDG_Init+0x2c>)
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <MX_IWDG_Init+0x30>)
 8000b40:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_IWDG_Init+0x2c>)
 8000b44:	2204      	movs	r2, #4
 8000b46:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1874;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_IWDG_Init+0x2c>)
 8000b4a:	f240 7252 	movw	r2, #1874	; 0x752
 8000b4e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_IWDG_Init+0x2c>)
 8000b52:	f000 fe35 	bl	80017c0 <HAL_IWDG_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000b5c:	f000 f986 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000320 	.word	0x20000320
 8000b68:	40003000 	.word	0x40003000

08000b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <MX_SPI1_Init+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000ba0:	2218      	movs	r2, #24
 8000ba2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bb8:	220a      	movs	r2, #10
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bbe:	f001 fa91 	bl	80020e4 <HAL_SPI_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bc8:	f000 f950 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000032c 	.word	0x2000032c
 8000bd4:	40013000 	.word	0x40013000

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000be4:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <MX_USART1_UART_Init+0x50>)
 8000be6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_USART1_UART_Init+0x48>)
 8000c0e:	f002 fa47 	bl	80030a0 <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000c18:	f000 f928 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000384 	.word	0x20000384
 8000c24:	40013800 	.word	0x40013800
 8000c28:	0007a120 	.word	0x0007a120

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a41      	ldr	r2, [pc, #260]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b3f      	ldr	r3, [pc, #252]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c58:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <MX_GPIO_Init+0x120>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	482a      	ldr	r0, [pc, #168]	; (8000d50 <MX_GPIO_Init+0x124>)
 8000ca8:	f000 fd40 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2103      	movs	r1, #3
 8000cb0:	4828      	ldr	r0, [pc, #160]	; (8000d54 <MX_GPIO_Init+0x128>)
 8000cb2:	f000 fd3b 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8000cbc:	4825      	ldr	r0, [pc, #148]	; (8000d54 <MX_GPIO_Init+0x128>)
 8000cbe:	f000 fd35 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481d      	ldr	r0, [pc, #116]	; (8000d50 <MX_GPIO_Init+0x124>)
 8000cdc:	f000 fba2 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <MX_GPIO_Init+0x128>)
 8000cf8:	f000 fb94 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_GPIO_Init+0x12c>)
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4810      	ldr	r0, [pc, #64]	; (8000d54 <MX_GPIO_Init+0x128>)
 8000d12:	f000 fb87 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000d16:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_GPIO_Init+0x128>)
 8000d30:	f000 fb78 	bl	8001424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2105      	movs	r1, #5
 8000d38:	2028      	movs	r0, #40	; 0x28
 8000d3a:	f000 fb48 	bl	80013ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d3e:	2028      	movs	r0, #40	; 0x28
 8000d40:	f000 fb61 	bl	8001406 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40010c00 	.word	0x40010c00
 8000d58:	10110000 	.word	0x10110000

08000d5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d6c:	d11b      	bne.n	8000da6 <HAL_GPIO_EXTI_Callback+0x4a>
	{
		Rx_start = 1;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
		LoRa_receive(&myLoRa,RxData,5);
 8000d74:	2205      	movs	r2, #5
 8000d76:	490f      	ldr	r1, [pc, #60]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d7a:	f7ff fca6 	bl	80006ca <LoRa_receive>
		if(ledData != RxData[1])
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d80:	785a      	ldrb	r2, [r3, #1]
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x60>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d00c      	beq.n	8000da6 <HAL_GPIO_EXTI_Callback+0x4a>
		{
			ledData = RxData[1];
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d8e:	785a      	ldrb	r2, [r3, #1]
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x60>)
 8000d92:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, ledData);
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x60>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000da2:	f000 fcc3 	bl	800172c <HAL_GPIO_WritePin>
		}
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000060c 	.word	0x2000060c
 8000db4:	2000050c 	.word	0x2000050c
 8000db8:	200003dc 	.word	0x200003dc
 8000dbc:	2000060d 	.word	0x2000060d
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <StartSensorLight>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensorLight */
void StartSensorLight(void const * argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f002 faaf 	bl	8003330 <osDelay>
 8000dd2:	e7fb      	b.n	8000dcc <StartSensorLight+0x8>

08000dd4 <StartLoraTransmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoraTransmit */
void StartLoraTransmit(void const * argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraTransmit */
  /* Infinite loop */
  for(;;)
  {
	  if(LoRa_transmit(&myLoRa, TxData, 8, 100))
 8000ddc:	2364      	movs	r3, #100	; 0x64
 8000dde:	2208      	movs	r2, #8
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <StartLoraTransmit+0x40>)
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <StartLoraTransmit+0x44>)
 8000de4:	f7ff fc0d 	bl	8000602 <LoRa_transmit>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00e      	beq.n	8000e0c <StartLoraTransmit+0x38>
	  	  {
	  		  HAL_Delay(1000);
 8000dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df2:	f000 fa13 	bl	800121c <HAL_Delay>
	  		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	4808      	ldr	r0, [pc, #32]	; (8000e1c <StartLoraTransmit+0x48>)
 8000dfc:	f000 fcae 	bl	800175c <HAL_GPIO_TogglePin>
	  //		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
	  		  HAL_IWDG_Refresh(&hiwdg);
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <StartLoraTransmit+0x4c>)
 8000e02:	f000 fd1f 	bl	8001844 <HAL_IWDG_Refresh>
	  		  Rx_start = 0;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <StartLoraTransmit+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	  	  };
    osDelay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f002 fa8f 	bl	8003330 <osDelay>
	  if(LoRa_transmit(&myLoRa, TxData, 8, 100))
 8000e12:	e7e3      	b.n	8000ddc <StartLoraTransmit+0x8>
 8000e14:	2000040c 	.word	0x2000040c
 8000e18:	200003dc 	.word	0x200003dc
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	20000320 	.word	0x20000320
 8000e24:	2000060c 	.word	0x2000060c

08000e28 <StartGetValueDoAm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetValueDoAm */
void StartGetValueDoAm(void const * argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetValueDoAm */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f002 fa7d 	bl	8003330 <osDelay>
 8000e36:	e7fb      	b.n	8000e30 <StartGetValueDoAm+0x8>

08000e38 <StartGetValueDoAmDat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetValueDoAmDat */
void StartGetValueDoAmDat(void const * argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetValueDoAmDat */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f002 fa75 	bl	8003330 <osDelay>
 8000e46:	e7fb      	b.n	8000e40 <StartGetValueDoAmDat+0x8>

08000e48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e5a:	f000 f9c3 	bl	80011e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40000400 	.word	0x40000400

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <HAL_MspInit+0x68>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_MspInit+0x68>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_MspInit+0x68>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_MspInit+0x68>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <HAL_MspInit+0x68>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x68>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	f06f 0001 	mvn.w	r0, #1
 8000eb6:	f000 fa8a 	bl	80013ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_MspInit+0x6c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_MspInit+0x6c>)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <HAL_SPI_MspInit+0x88>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d12f      	bne.n	8000f68 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_SPI_MspInit+0x8c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f4c:	f000 fa6a 	bl	8001424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_SPI_MspInit+0x90>)
 8000f64:	f000 fa5e 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010800 	.word	0x40010800

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <HAL_UART_MspInit+0x8c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d131      	bne.n	8001000 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_UART_MspInit+0x90>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_UART_MspInit+0x90>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_UART_MspInit+0x90>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <HAL_UART_MspInit+0x94>)
 8000fe2:	f000 fa1f 	bl	8001424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_UART_MspInit+0x94>)
 8000ffc:	f000 fa12 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40013800 	.word	0x40013800
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800

08001014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800102a:	4b34      	ldr	r3, [pc, #208]	; (80010fc <HAL_InitTick+0xe8>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a33      	ldr	r2, [pc, #204]	; (80010fc <HAL_InitTick+0xe8>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_InitTick+0xe8>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001042:	f107 0210 	add.w	r2, r7, #16
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fffb 	bl	8002048 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	2b00      	cmp	r3, #0
 800105a:	d103      	bne.n	8001064 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800105c:	f000 ffcc 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8001060:	6378      	str	r0, [r7, #52]	; 0x34
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001064:	f000 ffc8 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8001068:	4603      	mov	r3, r0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	4a23      	ldr	r2, [pc, #140]	; (8001100 <HAL_InitTick+0xec>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	3b01      	subs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_InitTick+0xf0>)
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_InitTick+0xf4>)
 8001080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <HAL_InitTick+0xf0>)
 8001084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001088:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <HAL_InitTick+0xf0>)
 800108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_InitTick+0xf0>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_InitTick+0xf0>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_InitTick+0xf0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80010a2:	4818      	ldr	r0, [pc, #96]	; (8001104 <HAL_InitTick+0xf0>)
 80010a4:	f001 fdb2 	bl	8002c0c <HAL_TIM_Base_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d11b      	bne.n	80010ee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <HAL_InitTick+0xf0>)
 80010b8:	f001 fe00 	bl	8002cbc <HAL_TIM_Base_Start_IT>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d111      	bne.n	80010ee <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010ca:	201d      	movs	r0, #29
 80010cc:	f000 f99b 	bl	8001406 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	d808      	bhi.n	80010e8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80010d6:	2200      	movs	r2, #0
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	201d      	movs	r0, #29
 80010dc:	f000 f977 	bl	80013ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_InitTick+0xf8>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e002      	b.n	80010ee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3738      	adds	r7, #56	; 0x38
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	431bde83 	.word	0x431bde83
 8001104:	20000610 	.word	0x20000610
 8001108:	40000400 	.word	0x40000400
 800110c:	20000008 	.word	0x20000008

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
	...

0800113c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TIM3_IRQHandler+0x10>)
 8001142:	f001 fe0d 	bl	8002d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000610 	.word	0x20000610

08001150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001154:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001158:	f000 fb1a 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800116c:	f7ff fff8 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001172:	490c      	ldr	r1, [pc, #48]	; (80011a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001188:	4c09      	ldr	r4, [pc, #36]	; (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001196:	f003 fac1 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff fbb3 	bl	8000904 <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011a8:	08004910 	.word	0x08004910
  ldr r2, =_sbss
 80011ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011b0:	200014e8 	.word	0x200014e8

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f8f5 	bl	80013b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f7ff ff20 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fe50 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x1c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a03      	ldr	r2, [pc, #12]	; (8001204 <HAL_IncTick+0x20>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000658 	.word	0x20000658

08001208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <HAL_GetTick+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000658 	.word	0x20000658

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff fff0 	bl	8001208 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffe0 	bl	8001208 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000000c 	.word	0x2000000c

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4906      	ldr	r1, [pc, #24]	; (80012fc <__NVIC_EnableIRQ+0x34>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff4f 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e0:	f7ff ff64 	bl	80012ac <__NVIC_GetPriorityGrouping>
 80013e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f7ff ffb2 	bl	8001354 <NVIC_EncodePriority>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff81 	bl	8001300 <__NVIC_SetPriority>
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff57 	bl	80012c8 <__NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b08b      	sub	sp, #44	; 0x2c
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	e169      	b.n	800170c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001438:	2201      	movs	r2, #1
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8158 	bne.w	8001706 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a9a      	ldr	r2, [pc, #616]	; (80016c4 <HAL_GPIO_Init+0x2a0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d05e      	beq.n	800151e <HAL_GPIO_Init+0xfa>
 8001460:	4a98      	ldr	r2, [pc, #608]	; (80016c4 <HAL_GPIO_Init+0x2a0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d875      	bhi.n	8001552 <HAL_GPIO_Init+0x12e>
 8001466:	4a98      	ldr	r2, [pc, #608]	; (80016c8 <HAL_GPIO_Init+0x2a4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d058      	beq.n	800151e <HAL_GPIO_Init+0xfa>
 800146c:	4a96      	ldr	r2, [pc, #600]	; (80016c8 <HAL_GPIO_Init+0x2a4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d86f      	bhi.n	8001552 <HAL_GPIO_Init+0x12e>
 8001472:	4a96      	ldr	r2, [pc, #600]	; (80016cc <HAL_GPIO_Init+0x2a8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d052      	beq.n	800151e <HAL_GPIO_Init+0xfa>
 8001478:	4a94      	ldr	r2, [pc, #592]	; (80016cc <HAL_GPIO_Init+0x2a8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d869      	bhi.n	8001552 <HAL_GPIO_Init+0x12e>
 800147e:	4a94      	ldr	r2, [pc, #592]	; (80016d0 <HAL_GPIO_Init+0x2ac>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d04c      	beq.n	800151e <HAL_GPIO_Init+0xfa>
 8001484:	4a92      	ldr	r2, [pc, #584]	; (80016d0 <HAL_GPIO_Init+0x2ac>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d863      	bhi.n	8001552 <HAL_GPIO_Init+0x12e>
 800148a:	4a92      	ldr	r2, [pc, #584]	; (80016d4 <HAL_GPIO_Init+0x2b0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d046      	beq.n	800151e <HAL_GPIO_Init+0xfa>
 8001490:	4a90      	ldr	r2, [pc, #576]	; (80016d4 <HAL_GPIO_Init+0x2b0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d85d      	bhi.n	8001552 <HAL_GPIO_Init+0x12e>
 8001496:	2b12      	cmp	r3, #18
 8001498:	d82a      	bhi.n	80014f0 <HAL_GPIO_Init+0xcc>
 800149a:	2b12      	cmp	r3, #18
 800149c:	d859      	bhi.n	8001552 <HAL_GPIO_Init+0x12e>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <HAL_GPIO_Init+0x80>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	0800151f 	.word	0x0800151f
 80014a8:	080014f9 	.word	0x080014f9
 80014ac:	0800150b 	.word	0x0800150b
 80014b0:	0800154d 	.word	0x0800154d
 80014b4:	08001553 	.word	0x08001553
 80014b8:	08001553 	.word	0x08001553
 80014bc:	08001553 	.word	0x08001553
 80014c0:	08001553 	.word	0x08001553
 80014c4:	08001553 	.word	0x08001553
 80014c8:	08001553 	.word	0x08001553
 80014cc:	08001553 	.word	0x08001553
 80014d0:	08001553 	.word	0x08001553
 80014d4:	08001553 	.word	0x08001553
 80014d8:	08001553 	.word	0x08001553
 80014dc:	08001553 	.word	0x08001553
 80014e0:	08001553 	.word	0x08001553
 80014e4:	08001553 	.word	0x08001553
 80014e8:	08001501 	.word	0x08001501
 80014ec:	08001515 	.word	0x08001515
 80014f0:	4a79      	ldr	r2, [pc, #484]	; (80016d8 <HAL_GPIO_Init+0x2b4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014f6:	e02c      	b.n	8001552 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e029      	b.n	8001554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	3304      	adds	r3, #4
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e024      	b.n	8001554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	3308      	adds	r3, #8
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e01f      	b.n	8001554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	330c      	adds	r3, #12
 800151a:	623b      	str	r3, [r7, #32]
          break;
 800151c:	e01a      	b.n	8001554 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001526:	2304      	movs	r3, #4
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e013      	b.n	8001554 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001534:	2308      	movs	r3, #8
 8001536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	611a      	str	r2, [r3, #16]
          break;
 800153e:	e009      	b.n	8001554 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001540:	2308      	movs	r3, #8
 8001542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	615a      	str	r2, [r3, #20]
          break;
 800154a:	e003      	b.n	8001554 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e000      	b.n	8001554 <HAL_GPIO_Init+0x130>
          break;
 8001552:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2bff      	cmp	r3, #255	; 0xff
 8001558:	d801      	bhi.n	800155e <HAL_GPIO_Init+0x13a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	e001      	b.n	8001562 <HAL_GPIO_Init+0x13e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3304      	adds	r3, #4
 8001562:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d802      	bhi.n	8001570 <HAL_GPIO_Init+0x14c>
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x152>
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3b08      	subs	r3, #8
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	210f      	movs	r1, #15
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	401a      	ands	r2, r3
 8001588:	6a39      	ldr	r1, [r7, #32]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80b1 	beq.w	8001706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015a4:	4b4d      	ldr	r3, [pc, #308]	; (80016dc <HAL_GPIO_Init+0x2b8>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x2b8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x2b8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015bc:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <HAL_GPIO_Init+0x2bc>)
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a40      	ldr	r2, [pc, #256]	; (80016e4 <HAL_GPIO_Init+0x2c0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d013      	beq.n	8001610 <HAL_GPIO_Init+0x1ec>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a3f      	ldr	r2, [pc, #252]	; (80016e8 <HAL_GPIO_Init+0x2c4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d00d      	beq.n	800160c <HAL_GPIO_Init+0x1e8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a3e      	ldr	r2, [pc, #248]	; (80016ec <HAL_GPIO_Init+0x2c8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d007      	beq.n	8001608 <HAL_GPIO_Init+0x1e4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <HAL_GPIO_Init+0x2cc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_GPIO_Init+0x1e0>
 8001600:	2303      	movs	r3, #3
 8001602:	e006      	b.n	8001612 <HAL_GPIO_Init+0x1ee>
 8001604:	2304      	movs	r3, #4
 8001606:	e004      	b.n	8001612 <HAL_GPIO_Init+0x1ee>
 8001608:	2302      	movs	r3, #2
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x1ee>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_GPIO_Init+0x1ee>
 8001610:	2300      	movs	r3, #0
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	f002 0203 	and.w	r2, r2, #3
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	4093      	lsls	r3, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001622:	492f      	ldr	r1, [pc, #188]	; (80016e0 <HAL_GPIO_Init+0x2bc>)
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	492c      	ldr	r1, [pc, #176]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	43db      	mvns	r3, r3
 8001652:	4928      	ldr	r1, [pc, #160]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001654:	4013      	ands	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	4922      	ldr	r1, [pc, #136]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	60cb      	str	r3, [r1, #12]
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	43db      	mvns	r3, r3
 800167a:	491e      	ldr	r1, [pc, #120]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800167c:	4013      	ands	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4918      	ldr	r1, [pc, #96]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	4914      	ldr	r1, [pc, #80]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d021      	beq.n	80016f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
 80016c0:	e021      	b.n	8001706 <HAL_GPIO_Init+0x2e2>
 80016c2:	bf00      	nop
 80016c4:	10320000 	.word	0x10320000
 80016c8:	10310000 	.word	0x10310000
 80016cc:	10220000 	.word	0x10220000
 80016d0:	10210000 	.word	0x10210000
 80016d4:	10120000 	.word	0x10120000
 80016d8:	10110000 	.word	0x10110000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000
 80016e4:	40010800 	.word	0x40010800
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40011400 	.word	0x40011400
 80016f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_GPIO_Init+0x304>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	43db      	mvns	r3, r3
 8001700:	4909      	ldr	r1, [pc, #36]	; (8001728 <HAL_GPIO_Init+0x304>)
 8001702:	4013      	ands	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	3301      	adds	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	f47f ae8e 	bne.w	8001438 <HAL_GPIO_Init+0x14>
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	372c      	adds	r7, #44	; 0x2c
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40010400 	.word	0x40010400

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	041a      	lsls	r2, r3, #16
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43d9      	mvns	r1, r3
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	400b      	ands	r3, r1
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	611a      	str	r2, [r3, #16]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
	...

08001790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fad4 	bl	8000d5c <HAL_GPIO_EXTI_Callback>
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e034      	b.n	800183c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80017da:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f245 5255 	movw	r2, #21845	; 0x5555
 80017e4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6852      	ldr	r2, [r2, #4]
 80017ee:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6892      	ldr	r2, [r2, #8]
 80017f8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80017fa:	f7ff fd05 	bl	8001208 <HAL_GetTick>
 80017fe:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001800:	e00f      	b.n	8001822 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001802:	f7ff fd01 	bl	8001208 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b27      	cmp	r3, #39	; 0x27
 800180e:	d908      	bls.n	8001822 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e00c      	b.n	800183c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e8      	bne.n	8001802 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001838:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001854:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
	...

08001864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e272      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b04      	cmp	r3, #4
 800188e:	d00c      	beq.n	80018aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001890:	4b8f      	ldr	r3, [pc, #572]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d112      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5e>
 800189c:	4b8c      	ldr	r3, [pc, #560]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d10b      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018aa:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06c      	beq.n	8001990 <HAL_RCC_OscConfig+0x12c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d168      	bne.n	8001990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e24c      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x76>
 80018cc:	4b80      	ldr	r3, [pc, #512]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a7f      	ldr	r2, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e02e      	b.n	8001938 <HAL_RCC_OscConfig+0xd4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x98>
 80018e2:	4b7b      	ldr	r3, [pc, #492]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7a      	ldr	r2, [pc, #488]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b78      	ldr	r3, [pc, #480]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a77      	ldr	r2, [pc, #476]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xd4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0xbc>
 8001906:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a71      	ldr	r2, [pc, #452]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6e      	ldr	r2, [pc, #440]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xd4>
 8001920:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fc62 	bl	8001208 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fc5e 	bl	8001208 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e200      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xe4>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fc4e 	bl	8001208 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fc4a 	bl	8001208 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1ec      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x10c>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019aa:	4b49      	ldr	r3, [pc, #292]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x18c>
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x176>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1c0      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4939      	ldr	r1, [pc, #228]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fc03 	bl	8001208 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fbff 	bl	8001208 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1a1      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4927      	ldr	r1, [pc, #156]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fbe2 	bl	8001208 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff fbde 	bl	8001208 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e180      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d03a      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d019      	beq.n	8001aae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fbc2 	bl	8001208 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fbbe 	bl	8001208 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e160      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f000 fafe 	bl	80020a8 <RCC_Delay>
 8001aac:	e01c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fba8 	bl	8001208 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aba:	e00f      	b.n	8001adc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fba4 	bl	8001208 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d908      	bls.n	8001adc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e146      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	42420000 	.word	0x42420000
 8001ad8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001adc:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e9      	bne.n	8001abc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a6 	beq.w	8001c42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afa:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10d      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a87      	ldr	r2, [pc, #540]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	61d3      	str	r3, [r2, #28]
 8001b12:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <HAL_RCC_OscConfig+0x4c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d118      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x4c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7e      	ldr	r2, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x4c8>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff fb65 	bl	8001208 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7ff fb61 	bl	8001208 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e103      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b75      	ldr	r3, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0x4c8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x312>
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	e02d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x36e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x334>
 8001b7e:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a69      	ldr	r2, [pc, #420]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a66      	ldr	r2, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	e01c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x36e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_OscConfig+0x356>
 8001ba0:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	4b5e      	ldr	r3, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a5d      	ldr	r2, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x36e>
 8001bba:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a5a      	ldr	r2, [pc, #360]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d015      	beq.n	8001c06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fb15 	bl	8001208 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7ff fb11 	bl	8001208 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0b1      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ee      	beq.n	8001be2 <HAL_RCC_OscConfig+0x37e>
 8001c04:	e014      	b.n	8001c30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff faff 	bl	8001208 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fafb 	bl	8001208 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e09b      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ee      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d105      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8087 	beq.w	8001d5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c4c:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d061      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d146      	bne.n	8001cee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c60:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff facf 	bl	8001208 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff facb 	bl	8001208 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e06d      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d108      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4921      	ldr	r1, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a19      	ldr	r1, [r3, #32]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	491b      	ldr	r1, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fa9f 	bl	8001208 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff fa9b 	bl	8001208 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e03d      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x46a>
 8001cec:	e035      	b.n	8001d5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fa88 	bl	8001208 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff fa84 	bl	8001208 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e026      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x498>
 8001d1a:	e01e      	b.n	8001d5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e019      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_OscConfig+0x500>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0d0      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d910      	bls.n	8001dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 0207 	bic.w	r2, r3, #7
 8001d92:	4965      	ldr	r1, [pc, #404]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0b8      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001de6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	494d      	ldr	r1, [pc, #308]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d040      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d115      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e07f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e073      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06b      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4936      	ldr	r1, [pc, #216]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7ff f9d6 	bl	8001208 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7ff f9d2 	bl	8001208 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e053      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d210      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0207 	bic.w	r2, r3, #7
 8001e9e:	4922      	ldr	r1, [pc, #136]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e032      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4916      	ldr	r1, [pc, #88]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	490e      	ldr	r1, [pc, #56]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ef6:	f000 f821 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	490a      	ldr	r1, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001f08:	5ccb      	ldrb	r3, [r1, r3]
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1cc>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1d0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f87c 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	080048dc 	.word	0x080048dc
 8001f34:	20000004 	.word	0x20000004
 8001f38:	20000008 	.word	0x20000008

08001f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x30>
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x36>
 8001f6a:	e027      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6e:	613b      	str	r3, [r7, #16]
      break;
 8001f70:	e027      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	0c9b      	lsrs	r3, r3, #18
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f7c:	5cd3      	ldrb	r3, [r2, r3]
 8001f7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d010      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0c5b      	lsrs	r3, r3, #17
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9e:	fb03 f202 	mul.w	r2, r3, r2
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e004      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	613b      	str	r3, [r7, #16]
      break;
 8001fba:	e002      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbe:	613b      	str	r3, [r7, #16]
      break;
 8001fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc2:	693b      	ldr	r3, [r7, #16]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	007a1200 	.word	0x007a1200
 8001fd8:	080048f4 	.word	0x080048f4
 8001fdc:	08004904 	.word	0x08004904
 8001fe0:	003d0900 	.word	0x003d0900

08001fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff2 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	080048ec 	.word	0x080048ec

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	080048ec 	.word	0x080048ec

08002048 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	220f      	movs	r2, #15
 8002056:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetClockConfig+0x5c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0207 	and.w	r2, r3, #7
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40022000 	.word	0x40022000

080020a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <RCC_Delay+0x34>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <RCC_Delay+0x38>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0a5b      	lsrs	r3, r3, #9
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c4:	bf00      	nop
  }
  while (Delay --);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	60fa      	str	r2, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <RCC_Delay+0x1c>
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000004 	.word	0x20000004
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e076      	b.n	80021e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d108      	bne.n	8002110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002106:	d009      	beq.n	800211c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
 800210e:	e005      	b.n	800211c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fed6 	bl	8000ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002152:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	ea42 0103 	orr.w	r1, r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	0c1a      	lsrs	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f002 0204 	and.w	r2, r2, #4
 80021c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_SPI_Transmit+0x22>
 800220a:	2302      	movs	r3, #2
 800220c:	e12d      	b.n	800246a <HAL_SPI_Transmit+0x27e>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002216:	f7fe fff7 	bl	8001208 <HAL_GetTick>
 800221a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d002      	beq.n	8002232 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002230:	e116      	b.n	8002460 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_SPI_Transmit+0x52>
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002242:	e10d      	b.n	8002460 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2203      	movs	r2, #3
 8002248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228a:	d10f      	bne.n	80022ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d007      	beq.n	80022ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d2:	d14f      	bne.n	8002374 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_SPI_Transmit+0xf6>
 80022dc:	8afb      	ldrh	r3, [r7, #22]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d142      	bne.n	8002368 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	1c9a      	adds	r2, r3, #2
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002306:	e02f      	b.n	8002368 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d112      	bne.n	800233c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	86da      	strh	r2, [r3, #54]	; 0x36
 800233a:	e015      	b.n	8002368 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233c:	f7fe ff64 	bl	8001208 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d803      	bhi.n	8002354 <HAL_SPI_Transmit+0x168>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d102      	bne.n	800235a <HAL_SPI_Transmit+0x16e>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002366:	e07b      	b.n	8002460 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ca      	bne.n	8002308 <HAL_SPI_Transmit+0x11c>
 8002372:	e050      	b.n	8002416 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_SPI_Transmit+0x196>
 800237c:	8afb      	ldrh	r3, [r7, #22]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d144      	bne.n	800240c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023a8:	e030      	b.n	800240c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d113      	bne.n	80023e0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	330c      	adds	r3, #12
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80023de:	e015      	b.n	800240c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e0:	f7fe ff12 	bl	8001208 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d803      	bhi.n	80023f8 <HAL_SPI_Transmit+0x20c>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d102      	bne.n	80023fe <HAL_SPI_Transmit+0x212>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800240a:	e029      	b.n	8002460 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1c9      	bne.n	80023aa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fbd8 	bl	8002bd0 <SPI_EndRxTxTransaction>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	77fb      	strb	r3, [r7, #31]
 8002456:	e003      	b.n	8002460 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002468:	7ffb      	ldrb	r3, [r7, #31]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b088      	sub	sp, #32
 8002476:	af02      	add	r7, sp, #8
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d002      	beq.n	8002498 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002492:	2302      	movs	r3, #2
 8002494:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002496:	e0fb      	b.n	8002690 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a0:	d112      	bne.n	80024c8 <HAL_SPI_Receive+0x56>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2204      	movs	r2, #4
 80024ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f8ef 	bl	80026a2 <HAL_SPI_TransmitReceive>
 80024c4:	4603      	mov	r3, r0
 80024c6:	e0e8      	b.n	800269a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_SPI_Receive+0x64>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e0e1      	b.n	800269a <HAL_SPI_Receive+0x228>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024de:	f7fe fe93 	bl	8001208 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_SPI_Receive+0x7e>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024f4:	e0cc      	b.n	8002690 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2204      	movs	r2, #4
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	d10f      	bne.n	800255e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d007      	beq.n	800257c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d16a      	bne.n	800265a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002584:	e032      	b.n	80025ec <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d115      	bne.n	80025c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f103 020c 	add.w	r2, r3, #12
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025be:	e015      	b.n	80025ec <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025c0:	f7fe fe22 	bl	8001208 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d803      	bhi.n	80025d8 <HAL_SPI_Receive+0x166>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d102      	bne.n	80025de <HAL_SPI_Receive+0x16c>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80025ea:	e051      	b.n	8002690 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1c7      	bne.n	8002586 <HAL_SPI_Receive+0x114>
 80025f6:	e035      	b.n	8002664 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d113      	bne.n	800262e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	b292      	uxth	r2, r2
 8002612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	1c9a      	adds	r2, r3, #2
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800262c:	e015      	b.n	800265a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262e:	f7fe fdeb 	bl	8001208 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d803      	bhi.n	8002646 <HAL_SPI_Receive+0x1d4>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d102      	bne.n	800264c <HAL_SPI_Receive+0x1da>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002658:	e01a      	b.n	8002690 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1c9      	bne.n	80025f8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa5f 	bl	8002b2c <SPI_EndRxTransaction>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
 8002686:	e003      	b.n	8002690 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b08c      	sub	sp, #48	; 0x30
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x26>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e198      	b.n	80029fa <HAL_SPI_TransmitReceive+0x358>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d0:	f7fe fd9a 	bl	8001208 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00f      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x70>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f8:	d107      	bne.n	800270a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <HAL_SPI_TransmitReceive+0x68>
 8002702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002706:	2b04      	cmp	r3, #4
 8002708:	d003      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002710:	e16d      	b.n	80029ee <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x82>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x82>
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800272a:	e160      	b.n	80029ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b04      	cmp	r3, #4
 8002736:	d003      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2205      	movs	r2, #5
 800273c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d007      	beq.n	8002794 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002792:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800279c:	d17c      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_TransmitReceive+0x10a>
 80027a6:	8b7b      	ldrh	r3, [r7, #26]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d16a      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1c9a      	adds	r2, r3, #2
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d0:	e057      	b.n	8002882 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d11b      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x176>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_SPI_TransmitReceive+0x176>
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d113      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d119      	bne.n	800285a <HAL_SPI_TransmitReceive+0x1b8>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d014      	beq.n	800285a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	b292      	uxth	r2, r2
 800283c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	1c9a      	adds	r2, r3, #2
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002856:	2301      	movs	r3, #1
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800285a:	f7fe fcd5 	bl	8001208 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002866:	429a      	cmp	r2, r3
 8002868:	d80b      	bhi.n	8002882 <HAL_SPI_TransmitReceive+0x1e0>
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d007      	beq.n	8002882 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002880:	e0b5      	b.n	80029ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1a2      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x130>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d19d      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x130>
 8002896:	e080      	b.n	800299a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0x204>
 80028a0:	8b7b      	ldrh	r3, [r7, #26]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d16f      	bne.n	8002986 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028cc:	e05b      	b.n	8002986 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d11c      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x274>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d017      	beq.n	8002916 <HAL_SPI_TransmitReceive+0x274>
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d114      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d119      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x2b6>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d014      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002954:	2301      	movs	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002958:	f7fe fc56 	bl	8001208 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002964:	429a      	cmp	r2, r3
 8002966:	d803      	bhi.n	8002970 <HAL_SPI_TransmitReceive+0x2ce>
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d102      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x2d4>
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002984:	e033      	b.n	80029ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d19e      	bne.n	80028ce <HAL_SPI_TransmitReceive+0x22c>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d199      	bne.n	80028ce <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f916 	bl	8002bd0 <SPI_EndRxTxTransaction>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029b6:	e01a      	b.n	80029ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029e4:	e003      	b.n	80029ee <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3730      	adds	r7, #48	; 0x30
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a10:	b2db      	uxtb	r3, r3
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a2c:	f7fe fbec 	bl	8001208 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a3c:	f7fe fbe4 	bl	8001208 <HAL_GetTick>
 8002a40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a42:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	015b      	lsls	r3, r3, #5
 8002a48:	0d1b      	lsrs	r3, r3, #20
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a52:	e054      	b.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d050      	beq.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a5c:	f7fe fbd4 	bl	8001208 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d902      	bls.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d13d      	bne.n	8002aee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8a:	d111      	bne.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a94:	d004      	beq.n	8002aa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9e:	d107      	bne.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab8:	d10f      	bne.n	8002ada <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e017      	b.n	8002b1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4013      	ands	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d19b      	bne.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000004 	.word	0x20000004

08002b2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b40:	d111      	bne.n	8002b66 <SPI_EndRxTransaction+0x3a>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4a:	d004      	beq.n	8002b56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d107      	bne.n	8002b66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b64:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b6e:	d117      	bne.n	8002ba0 <SPI_EndRxTransaction+0x74>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b78:	d112      	bne.n	8002ba0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2101      	movs	r1, #1
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff ff49 	bl	8002a1c <SPI_WaitFlagStateUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01a      	beq.n	8002bc6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e013      	b.n	8002bc8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff ff36 	bl	8002a1c <SPI_WaitFlagStateUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e000      	b.n	8002bc8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff ff18 	bl	8002a1c <SPI_WaitFlagStateUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e000      	b.n	8002c04 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e041      	b.n	8002ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f839 	bl	8002caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 f9b4 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d001      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e03a      	b.n	8002d4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <HAL_TIM_Base_Start_IT+0x98>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00e      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x58>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d009      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x58>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x58>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <HAL_TIM_Base_Start_IT+0xa0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d010      	beq.n	8002d48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d36:	e007      	b.n	8002d48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800

08002d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0202 	mvn.w	r2, #2
 8002d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8ed 	bl	8002f82 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8e0 	bl	8002f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8ef 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0204 	mvn.w	r2, #4
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8c3 	bl	8002f82 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f8b6 	bl	8002f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8c5 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0208 	mvn.w	r2, #8
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f899 	bl	8002f82 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f88c 	bl	8002f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f89b 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0210 	mvn.w	r2, #16
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f86f 	bl	8002f82 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f862 	bl	8002f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f871 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0201 	mvn.w	r2, #1
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd ffb2 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8bf 	bl	800308e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f835 	bl	8002fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d10e      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d107      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0220 	mvn.w	r2, #32
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f88a 	bl	800307c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00b      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d007      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a26      	ldr	r2, [pc, #152]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d003      	beq.n	8002fe8 <TIM_Base_SetConfig+0x30>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a25      	ldr	r2, [pc, #148]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d108      	bne.n	8002ffa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <TIM_Base_SetConfig+0xbc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0x62>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <TIM_Base_SetConfig+0xc0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <TIM_Base_SetConfig+0xb8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d103      	bne.n	8003060 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	615a      	str	r2, [r3, #20]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800

0800307c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e042      	b.n	8003138 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd ff58 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2224      	movs	r2, #36	; 0x24
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f82b 	bl	8003140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800317a:	f023 030c 	bic.w	r3, r3, #12
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <UART_SetConfig+0x114>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe ff3a 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	e002      	b.n	80031b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7fe ff22 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 80031b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	0119      	lsls	r1, r3, #4
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009a      	lsls	r2, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <UART_SetConfig+0x118>)
 80031ee:	fba3 0302 	umull	r0, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	fb00 f303 	mul.w	r3, r0, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	; 0x32
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <UART_SetConfig+0x118>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320c:	4419      	add	r1, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f2f3 	udiv	r2, r2, r3
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <UART_SetConfig+0x118>)
 8003226:	fba3 0302 	umull	r0, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2064      	movs	r0, #100	; 0x64
 800322e:	fb00 f303 	mul.w	r3, r0, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	440a      	add	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40013800 	.word	0x40013800
 8003258:	51eb851f 	.word	0x51eb851f

0800325c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800326a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800326e:	2b84      	cmp	r3, #132	; 0x84
 8003270:	d005      	beq.n	800327e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003272:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	3303      	adds	r3, #3
 800327c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800327e:	68fb      	ldr	r3, [r7, #12]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800328e:	f000 fae7 	bl	8003860 <vTaskStartScheduler>
  
  return osOK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}

08003298 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af04      	add	r7, sp, #16
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d020      	beq.n	80032ec <osThreadCreate+0x54>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01c      	beq.n	80032ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685c      	ldr	r4, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691e      	ldr	r6, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ffc9 	bl	800325c <makeFreeRtosPriority>
 80032ca:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032d4:	9202      	str	r2, [sp, #8]
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	9100      	str	r1, [sp, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	4632      	mov	r2, r6
 80032de:	4629      	mov	r1, r5
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 f8e8 	bl	80034b6 <xTaskCreateStatic>
 80032e6:	4603      	mov	r3, r0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e01c      	b.n	8003326 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685c      	ldr	r4, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032f8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ffab 	bl	800325c <makeFreeRtosPriority>
 8003306:	4602      	mov	r2, r0
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	9200      	str	r2, [sp, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4632      	mov	r2, r6
 8003314:	4629      	mov	r1, r5
 8003316:	4620      	mov	r0, r4
 8003318:	f000 f929 	bl	800356e <xTaskCreate>
 800331c:	4603      	mov	r3, r0
 800331e:	2b01      	cmp	r3, #1
 8003320:	d001      	beq.n	8003326 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003330 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <osDelay+0x16>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	e000      	b.n	8003348 <osDelay+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fa55 	bl	80037f8 <vTaskDelay>
  
  return osOK;
 800334e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f103 0208 	add.w	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f103 0208 	add.w	r2, r3, #8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f103 0208 	add.w	r2, r3, #8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d103      	bne.n	8003414 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e00c      	b.n	800342e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3308      	adds	r3, #8
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e002      	b.n	8003422 <vListInsert+0x2e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d2f6      	bcs.n	800341c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6852      	ldr	r2, [r2, #4]
 8003484:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d103      	bne.n	8003498 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08e      	sub	sp, #56	; 0x38
 80034ba:	af04      	add	r7, sp, #16
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <xTaskCreateStatic+0x46>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	61fb      	str	r3, [r7, #28]
}
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034fc:	23a0      	movs	r3, #160	; 0xa0
 80034fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2ba0      	cmp	r3, #160	; 0xa0
 8003504:	d00a      	beq.n	800351c <xTaskCreateStatic+0x66>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	61bb      	str	r3, [r7, #24]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01e      	beq.n	8003560 <xTaskCreateStatic+0xaa>
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003530:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	2202      	movs	r2, #2
 8003536:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800353a:	2300      	movs	r3, #0
 800353c:	9303      	str	r3, [sp, #12]
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f850 	bl	80035f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800355a:	f000 f8e3 	bl	8003724 <prvAddNewTaskToReadyList>
 800355e:	e001      	b.n	8003564 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003564:	697b      	ldr	r3, [r7, #20]
	}
 8003566:	4618      	mov	r0, r3
 8003568:	3728      	adds	r7, #40	; 0x28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800356e:	b580      	push	{r7, lr}
 8003570:	b08c      	sub	sp, #48	; 0x30
 8003572:	af04      	add	r7, sp, #16
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fe94 	bl	80042b0 <pvPortMalloc>
 8003588:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003590:	20a0      	movs	r0, #160	; 0xa0
 8003592:	f000 fe8d 	bl	80042b0 <pvPortMalloc>
 8003596:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
 80035a4:	e005      	b.n	80035b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035a6:	6978      	ldr	r0, [r7, #20]
 80035a8:	f000 ff46 	bl	8004438 <vPortFree>
 80035ac:	e001      	b.n	80035b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d017      	beq.n	80035e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9303      	str	r3, [sp, #12]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	9302      	str	r3, [sp, #8]
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f80e 	bl	80035f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035dc:	69f8      	ldr	r0, [r7, #28]
 80035de:	f000 f8a1 	bl	8003724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035e2:	2301      	movs	r3, #1
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e002      	b.n	80035ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035ee:	69bb      	ldr	r3, [r7, #24]
	}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003610:	3b01      	subs	r3, #1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f023 0307 	bic.w	r3, r3, #7
 800361e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <prvInitialiseNewTask+0x48>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	617b      	str	r3, [r7, #20]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	e012      	b.n	800366c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	7819      	ldrb	r1, [r3, #0]
 800364e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	3334      	adds	r3, #52	; 0x34
 8003656:	460a      	mov	r2, r1
 8003658:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3301      	adds	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d9e9      	bls.n	8003646 <prvInitialiseNewTask+0x4e>
 8003672:	e000      	b.n	8003676 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003674:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	2b06      	cmp	r3, #6
 8003682:	d901      	bls.n	8003688 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003684:	2306      	movs	r3, #6
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	2200      	movs	r2, #0
 8003698:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	3304      	adds	r3, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fe79 	bl	8003396 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	3318      	adds	r3, #24
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fe74 	bl	8003396 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	f1c3 0207 	rsb	r2, r3, #7
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	334c      	adds	r3, #76	; 0x4c
 80036d8:	224c      	movs	r2, #76	; 0x4c
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 ffbf 	bl	8004660 <memset>
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <prvInitialiseNewTask+0x120>)
 80036e6:	651a      	str	r2, [r3, #80]	; 0x50
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	4a0c      	ldr	r2, [pc, #48]	; (800371c <prvInitialiseNewTask+0x124>)
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <prvInitialiseNewTask+0x128>)
 80036f2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	69b8      	ldr	r0, [r7, #24]
 80036fa:	f000 fc29 	bl	8003f50 <pxPortInitialiseStack>
 80036fe:	4602      	mov	r2, r0
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003710:	bf00      	nop
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200013a8 	.word	0x200013a8
 800371c:	20001410 	.word	0x20001410
 8003720:	20001478 	.word	0x20001478

08003724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800372c:	f000 fcfe 	bl	800412c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <prvAddNewTaskToReadyList+0xb8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	4a29      	ldr	r2, [pc, #164]	; (80037dc <prvAddNewTaskToReadyList+0xb8>)
 8003738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <prvAddNewTaskToReadyList+0xbc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003742:	4a27      	ldr	r2, [pc, #156]	; (80037e0 <prvAddNewTaskToReadyList+0xbc>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <prvAddNewTaskToReadyList+0xb8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d110      	bne.n	8003772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003750:	f000 fad2 	bl	8003cf8 <prvInitialiseTaskLists>
 8003754:	e00d      	b.n	8003772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003756:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <prvAddNewTaskToReadyList+0xc0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <prvAddNewTaskToReadyList+0xbc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	429a      	cmp	r2, r3
 800376a:	d802      	bhi.n	8003772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800376c:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <prvAddNewTaskToReadyList+0xbc>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <prvAddNewTaskToReadyList+0xc4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3301      	adds	r3, #1
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <prvAddNewTaskToReadyList+0xc4>)
 800377a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	2201      	movs	r2, #1
 8003782:	409a      	lsls	r2, r3
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <prvAddNewTaskToReadyList+0xc8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4313      	orrs	r3, r2
 800378a:	4a18      	ldr	r2, [pc, #96]	; (80037ec <prvAddNewTaskToReadyList+0xc8>)
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <prvAddNewTaskToReadyList+0xcc>)
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f7ff fe02 	bl	80033ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037aa:	f000 fcef 	bl	800418c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <prvAddNewTaskToReadyList+0xc0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00e      	beq.n	80037d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037b6:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <prvAddNewTaskToReadyList+0xbc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d207      	bcs.n	80037d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <prvAddNewTaskToReadyList+0xd0>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	2000075c 	.word	0x2000075c
 80037e0:	2000065c 	.word	0x2000065c
 80037e4:	20000768 	.word	0x20000768
 80037e8:	20000778 	.word	0x20000778
 80037ec:	20000764 	.word	0x20000764
 80037f0:	20000660 	.word	0x20000660
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <vTaskDelay+0x60>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <vTaskDelay+0x30>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60bb      	str	r3, [r7, #8]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003828:	f000 f884 	bl	8003934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb28 	bl	8003e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003834:	f000 f88c 	bl	8003950 <xTaskResumeAll>
 8003838:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <vTaskDelay+0x64>)
 8003842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000784 	.word	0x20000784
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800386e:	463a      	mov	r2, r7
 8003870:	1d39      	adds	r1, r7, #4
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd f82c 	bl	80008d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	9202      	str	r2, [sp, #8]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	460a      	mov	r2, r1
 800388e:	4921      	ldr	r1, [pc, #132]	; (8003914 <vTaskStartScheduler+0xb4>)
 8003890:	4821      	ldr	r0, [pc, #132]	; (8003918 <vTaskStartScheduler+0xb8>)
 8003892:	f7ff fe10 	bl	80034b6 <xTaskCreateStatic>
 8003896:	4603      	mov	r3, r0
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <vTaskStartScheduler+0xbc>)
 800389a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <vTaskStartScheduler+0xbc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e001      	b.n	80038ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d11b      	bne.n	80038ec <vTaskStartScheduler+0x8c>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	613b      	str	r3, [r7, #16]
}
 80038c6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038c8:	4b15      	ldr	r3, [pc, #84]	; (8003920 <vTaskStartScheduler+0xc0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	334c      	adds	r3, #76	; 0x4c
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <vTaskStartScheduler+0xc4>)
 80038d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <vTaskStartScheduler+0xc8>)
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <vTaskStartScheduler+0xcc>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <vTaskStartScheduler+0xd0>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038e6:	f000 fbaf 	bl	8004048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038ea:	e00e      	b.n	800390a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d10a      	bne.n	800390a <vTaskStartScheduler+0xaa>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <vTaskStartScheduler+0xa8>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	080048d4 	.word	0x080048d4
 8003918:	08003cc9 	.word	0x08003cc9
 800391c:	20000780 	.word	0x20000780
 8003920:	2000065c 	.word	0x2000065c
 8003924:	20000060 	.word	0x20000060
 8003928:	2000077c 	.word	0x2000077c
 800392c:	20000768 	.word	0x20000768
 8003930:	20000760 	.word	0x20000760

08003934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <vTaskSuspendAll+0x18>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	4a03      	ldr	r2, [pc, #12]	; (800394c <vTaskSuspendAll+0x18>)
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000784 	.word	0x20000784

08003950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <xTaskResumeAll+0x114>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <xTaskResumeAll+0x2c>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	603b      	str	r3, [r7, #0]
}
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800397c:	f000 fbd6 	bl	800412c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003980:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <xTaskResumeAll+0x114>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3b01      	subs	r3, #1
 8003986:	4a37      	ldr	r2, [pc, #220]	; (8003a64 <xTaskResumeAll+0x114>)
 8003988:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <xTaskResumeAll+0x114>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d161      	bne.n	8003a56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003992:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <xTaskResumeAll+0x118>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d05d      	beq.n	8003a56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800399a:	e02e      	b.n	80039fa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800399c:	4b33      	ldr	r3, [pc, #204]	; (8003a6c <xTaskResumeAll+0x11c>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3318      	adds	r3, #24
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fd5b 	bl	8003464 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fd56 	bl	8003464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <xTaskResumeAll+0x120>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <xTaskResumeAll+0x120>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <xTaskResumeAll+0x124>)
 80039d8:	441a      	add	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7ff fce4 	bl	80033ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <xTaskResumeAll+0x128>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80039f4:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <xTaskResumeAll+0x12c>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <xTaskResumeAll+0x11c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1cc      	bne.n	800399c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a08:	f000 fa18 	bl	8003e3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <xTaskResumeAll+0x130>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a18:	f000 f836 	bl	8003a88 <xTaskIncrementTick>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003a22:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <xTaskResumeAll+0x12c>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f1      	bne.n	8003a18 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <xTaskResumeAll+0x130>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <xTaskResumeAll+0x12c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a42:	2301      	movs	r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <xTaskResumeAll+0x134>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a56:	f000 fb99 	bl	800418c <vPortExitCritical>

	return xAlreadyYielded;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000784 	.word	0x20000784
 8003a68:	2000075c 	.word	0x2000075c
 8003a6c:	2000071c 	.word	0x2000071c
 8003a70:	20000764 	.word	0x20000764
 8003a74:	20000660 	.word	0x20000660
 8003a78:	2000065c 	.word	0x2000065c
 8003a7c:	20000770 	.word	0x20000770
 8003a80:	2000076c 	.word	0x2000076c
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a92:	4b51      	ldr	r3, [pc, #324]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 808d 	bne.w	8003bb6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a9c:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003aa4:	4a4d      	ldr	r2, [pc, #308]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d120      	bne.n	8003af2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	603b      	str	r3, [r7, #0]
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <xTaskIncrementTick+0x46>
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a41      	ldr	r2, [pc, #260]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	4a3f      	ldr	r2, [pc, #252]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	f000 f9a5 	bl	8003e3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <xTaskIncrementTick+0x164>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d34d      	bcc.n	8003b98 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xTaskIncrementTick+0x82>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <xTaskIncrementTick+0x84>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b10:	4b36      	ldr	r3, [pc, #216]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b12:	f04f 32ff 	mov.w	r2, #4294967295
 8003b16:	601a      	str	r2, [r3, #0]
					break;
 8003b18:	e03e      	b.n	8003b98 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d203      	bcs.n	8003b3a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b32:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6013      	str	r3, [r2, #0]
						break;
 8003b38:	e02e      	b.n	8003b98 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fc90 	bl	8003464 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fc87 	bl	8003464 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <xTaskIncrementTick+0x16c>)
 8003b76:	441a      	add	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f7ff fc15 	bl	80033ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <xTaskIncrementTick+0x170>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d3b4      	bcc.n	8003afc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b92:	2301      	movs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b96:	e7b1      	b.n	8003afc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <xTaskIncrementTick+0x170>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9e:	4915      	ldr	r1, [pc, #84]	; (8003bf4 <xTaskIncrementTick+0x16c>)
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d907      	bls.n	8003bc0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e004      	b.n	8003bc0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <xTaskIncrementTick+0x174>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <xTaskIncrementTick+0x174>)
 8003bbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <xTaskIncrementTick+0x178>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bcc:	697b      	ldr	r3, [r7, #20]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000784 	.word	0x20000784
 8003bdc:	20000760 	.word	0x20000760
 8003be0:	20000714 	.word	0x20000714
 8003be4:	20000718 	.word	0x20000718
 8003be8:	20000774 	.word	0x20000774
 8003bec:	2000077c 	.word	0x2000077c
 8003bf0:	20000764 	.word	0x20000764
 8003bf4:	20000660 	.word	0x20000660
 8003bf8:	2000065c 	.word	0x2000065c
 8003bfc:	2000076c 	.word	0x2000076c
 8003c00:	20000770 	.word	0x20000770

08003c04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <vTaskSwitchContext+0xac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c12:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <vTaskSwitchContext+0xb0>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c18:	e044      	b.n	8003ca4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003c1a:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <vTaskSwitchContext+0xb0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <vTaskSwitchContext+0xb4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c2e:	7afb      	ldrb	r3, [r7, #11]
 8003c30:	f1c3 031f 	rsb	r3, r3, #31
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	4921      	ldr	r1, [pc, #132]	; (8003cbc <vTaskSwitchContext+0xb8>)
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	607b      	str	r3, [r7, #4]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <vTaskSwitchContext+0x5a>
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <vTaskSwitchContext+0xb8>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	3308      	adds	r3, #8
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d104      	bne.n	8003c90 <vTaskSwitchContext+0x8c>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <vTaskSwitchContext+0xbc>)
 8003c98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <vTaskSwitchContext+0xbc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	334c      	adds	r3, #76	; 0x4c
 8003ca0:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <vTaskSwitchContext+0xc0>)
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000784 	.word	0x20000784
 8003cb4:	20000770 	.word	0x20000770
 8003cb8:	20000764 	.word	0x20000764
 8003cbc:	20000660 	.word	0x20000660
 8003cc0:	2000065c 	.word	0x2000065c
 8003cc4:	20000060 	.word	0x20000060

08003cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cd0:	f000 f852 	bl	8003d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <prvIdleTask+0x28>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d9f9      	bls.n	8003cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <prvIdleTask+0x2c>)
 8003cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cec:	e7f0      	b.n	8003cd0 <prvIdleTask+0x8>
 8003cee:	bf00      	nop
 8003cf0:	20000660 	.word	0x20000660
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	e00c      	b.n	8003d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <prvInitialiseTaskLists+0x60>)
 8003d10:	4413      	add	r3, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fb20 	bl	8003358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d9ef      	bls.n	8003d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d24:	480d      	ldr	r0, [pc, #52]	; (8003d5c <prvInitialiseTaskLists+0x64>)
 8003d26:	f7ff fb17 	bl	8003358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d2a:	480d      	ldr	r0, [pc, #52]	; (8003d60 <prvInitialiseTaskLists+0x68>)
 8003d2c:	f7ff fb14 	bl	8003358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d30:	480c      	ldr	r0, [pc, #48]	; (8003d64 <prvInitialiseTaskLists+0x6c>)
 8003d32:	f7ff fb11 	bl	8003358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d36:	480c      	ldr	r0, [pc, #48]	; (8003d68 <prvInitialiseTaskLists+0x70>)
 8003d38:	f7ff fb0e 	bl	8003358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d3c:	480b      	ldr	r0, [pc, #44]	; (8003d6c <prvInitialiseTaskLists+0x74>)
 8003d3e:	f7ff fb0b 	bl	8003358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <prvInitialiseTaskLists+0x78>)
 8003d44:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <prvInitialiseTaskLists+0x64>)
 8003d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <prvInitialiseTaskLists+0x7c>)
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <prvInitialiseTaskLists+0x68>)
 8003d4c:	601a      	str	r2, [r3, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000660 	.word	0x20000660
 8003d5c:	200006ec 	.word	0x200006ec
 8003d60:	20000700 	.word	0x20000700
 8003d64:	2000071c 	.word	0x2000071c
 8003d68:	20000730 	.word	0x20000730
 8003d6c:	20000748 	.word	0x20000748
 8003d70:	20000714 	.word	0x20000714
 8003d74:	20000718 	.word	0x20000718

08003d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d7e:	e019      	b.n	8003db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d80:	f000 f9d4 	bl	800412c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <prvCheckTasksWaitingTermination+0x50>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fb67 	bl	8003464 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <prvCheckTasksWaitingTermination+0x54>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <prvCheckTasksWaitingTermination+0x54>)
 8003d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <prvCheckTasksWaitingTermination+0x58>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <prvCheckTasksWaitingTermination+0x58>)
 8003da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003daa:	f000 f9ef 	bl	800418c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f810 	bl	8003dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <prvCheckTasksWaitingTermination+0x58>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e1      	bne.n	8003d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000730 	.word	0x20000730
 8003dcc:	2000075c 	.word	0x2000075c
 8003dd0:	20000744 	.word	0x20000744

08003dd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	334c      	adds	r3, #76	; 0x4c
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fc45 	bl	8004670 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d108      	bne.n	8003e02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fb1f 	bl	8004438 <vPortFree>
				vPortFree( pxTCB );
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fb1c 	bl	8004438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e00:	e018      	b.n	8003e34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d103      	bne.n	8003e14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fb13 	bl	8004438 <vPortFree>
	}
 8003e12:	e00f      	b.n	8003e34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d00a      	beq.n	8003e34 <prvDeleteTCB+0x60>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	60fb      	str	r3, [r7, #12]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <prvDeleteTCB+0x5e>
	}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <prvResetNextTaskUnblockTime+0x40>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <prvResetNextTaskUnblockTime+0x14>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <prvResetNextTaskUnblockTime+0x16>
 8003e50:	2300      	movs	r3, #0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <prvResetNextTaskUnblockTime+0x44>)
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e5e:	e008      	b.n	8003e72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <prvResetNextTaskUnblockTime+0x40>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <prvResetNextTaskUnblockTime+0x44>)
 8003e70:	6013      	str	r3, [r2, #0]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	20000714 	.word	0x20000714
 8003e80:	2000077c 	.word	0x2000077c

08003e84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fae2 	bl	8003464 <uxListRemove>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	2201      	movs	r2, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ebc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d10a      	bne.n	8003edc <prvAddCurrentTaskToDelayedList+0x58>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	481a      	ldr	r0, [pc, #104]	; (8003f40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ed6:	f7ff fa6a 	bl	80033ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eda:	e026      	b.n	8003f2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ee4:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d209      	bcs.n	8003f08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7ff fa77 	bl	80033f4 <vListInsert>
}
 8003f06:	e010      	b.n	8003f2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7ff fa6d 	bl	80033f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d202      	bcs.n	8003f2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6013      	str	r3, [r2, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000760 	.word	0x20000760
 8003f38:	2000065c 	.word	0x2000065c
 8003f3c:	20000764 	.word	0x20000764
 8003f40:	20000748 	.word	0x20000748
 8003f44:	20000718 	.word	0x20000718
 8003f48:	20000714 	.word	0x20000714
 8003f4c:	2000077c 	.word	0x2000077c

08003f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b04      	subs	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f80:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <pxPortInitialiseStack+0x54>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b14      	subs	r3, #20
 8003f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b20      	subs	r3, #32
 8003f96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	08003fa9 	.word	0x08003fa9

08003fa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <prvTaskExitError+0x54>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d00a      	beq.n	8003fd2 <prvTaskExitError+0x2a>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	60fb      	str	r3, [r7, #12]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <prvTaskExitError+0x28>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	60bb      	str	r3, [r7, #8]
}
 8003fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fe6:	bf00      	nop
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0fc      	beq.n	8003fe8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003fee:	bf00      	nop
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000010 	.word	0x20000010

08004000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004000:	4b07      	ldr	r3, [pc, #28]	; (8004020 <pxCurrentTCBConst2>)
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	6808      	ldr	r0, [r1, #0]
 8004006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800400a:	f380 8809 	msr	PSP, r0
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f380 8811 	msr	BASEPRI, r0
 800401a:	f04e 0e0d 	orr.w	lr, lr, #13
 800401e:	4770      	bx	lr

08004020 <pxCurrentTCBConst2>:
 8004020:	2000065c 	.word	0x2000065c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop

08004028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004028:	4806      	ldr	r0, [pc, #24]	; (8004044 <prvPortStartFirstTask+0x1c>)
 800402a:	6800      	ldr	r0, [r0, #0]
 800402c:	6800      	ldr	r0, [r0, #0]
 800402e:	f380 8808 	msr	MSP, r0
 8004032:	b662      	cpsie	i
 8004034:	b661      	cpsie	f
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	df00      	svc	0
 8004040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004042:	bf00      	nop
 8004044:	e000ed08 	.word	0xe000ed08

08004048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800404e:	4b32      	ldr	r3, [pc, #200]	; (8004118 <xPortStartScheduler+0xd0>)
 8004050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	22ff      	movs	r2, #255	; 0xff
 800405e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004070:	b2da      	uxtb	r2, r3
 8004072:	4b2a      	ldr	r3, [pc, #168]	; (800411c <xPortStartScheduler+0xd4>)
 8004074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <xPortStartScheduler+0xd8>)
 8004078:	2207      	movs	r2, #7
 800407a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800407c:	e009      	b.n	8004092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800407e:	4b28      	ldr	r3, [pc, #160]	; (8004120 <xPortStartScheduler+0xd8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3b01      	subs	r3, #1
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <xPortStartScheduler+0xd8>)
 8004086:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d0ef      	beq.n	800407e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <xPortStartScheduler+0xd8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1c3 0307 	rsb	r3, r3, #7
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00a      	beq.n	80040c0 <xPortStartScheduler+0x78>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	60bb      	str	r3, [r7, #8]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <xPortStartScheduler+0xd8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	4a16      	ldr	r2, [pc, #88]	; (8004120 <xPortStartScheduler+0xd8>)
 80040c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <xPortStartScheduler+0xd8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040d2:	4a13      	ldr	r2, [pc, #76]	; (8004120 <xPortStartScheduler+0xd8>)
 80040d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <xPortStartScheduler+0xdc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a10      	ldr	r2, [pc, #64]	; (8004124 <xPortStartScheduler+0xdc>)
 80040e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <xPortStartScheduler+0xdc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <xPortStartScheduler+0xdc>)
 80040f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040f6:	f000 f8b9 	bl	800426c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <xPortStartScheduler+0xe0>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004100:	f7ff ff92 	bl	8004028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004104:	f7ff fd7e 	bl	8003c04 <vTaskSwitchContext>
	prvTaskExitError();
 8004108:	f7ff ff4e 	bl	8003fa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	e000e400 	.word	0xe000e400
 800411c:	20000788 	.word	0x20000788
 8004120:	2000078c 	.word	0x2000078c
 8004124:	e000ed20 	.word	0xe000ed20
 8004128:	20000010 	.word	0x20000010

0800412c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	607b      	str	r3, [r7, #4]
}
 8004144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <vPortEnterCritical+0x58>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <vPortEnterCritical+0x58>)
 800414e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <vPortEnterCritical+0x58>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10f      	bne.n	8004178 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <vPortEnterCritical+0x5c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <vPortEnterCritical+0x4c>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	603b      	str	r3, [r7, #0]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <vPortEnterCritical+0x4a>
	}
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000010 	.word	0x20000010
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <vPortExitCritical+0x4c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <vPortExitCritical+0x24>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	607b      	str	r3, [r7, #4]
}
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <vPortExitCritical+0x4c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <vPortExitCritical+0x4c>)
 80041b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <vPortExitCritical+0x4c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <vPortExitCritical+0x42>
 80041c2:	2300      	movs	r3, #0
 80041c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	20000010 	.word	0x20000010
 80041dc:	00000000 	.word	0x00000000

080041e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041e0:	f3ef 8009 	mrs	r0, PSP
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <pxCurrentTCBConst>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041f0:	6010      	str	r0, [r2, #0]
 80041f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80041f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041fa:	f380 8811 	msr	BASEPRI, r0
 80041fe:	f7ff fd01 	bl	8003c04 <vTaskSwitchContext>
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8811 	msr	BASEPRI, r0
 800420a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	6808      	ldr	r0, [r1, #0]
 8004212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004216:	f380 8809 	msr	PSP, r0
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	4770      	bx	lr

08004220 <pxCurrentTCBConst>:
 8004220:	2000065c 	.word	0x2000065c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	607b      	str	r3, [r7, #4]
}
 8004240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004242:	f7ff fc21 	bl	8003a88 <xTaskIncrementTick>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <SysTick_Handler+0x40>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f383 8811 	msr	BASEPRI, r3
}
 800425e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <vPortSetupTimerInterrupt+0x30>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <vPortSetupTimerInterrupt+0x34>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <vPortSetupTimerInterrupt+0x38>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <vPortSetupTimerInterrupt+0x3c>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	099b      	lsrs	r3, r3, #6
 8004288:	4a08      	ldr	r2, [pc, #32]	; (80042ac <vPortSetupTimerInterrupt+0x40>)
 800428a:	3b01      	subs	r3, #1
 800428c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800428e:	4b03      	ldr	r3, [pc, #12]	; (800429c <vPortSetupTimerInterrupt+0x30>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	e000e010 	.word	0xe000e010
 80042a0:	e000e018 	.word	0xe000e018
 80042a4:	20000004 	.word	0x20000004
 80042a8:	10624dd3 	.word	0x10624dd3
 80042ac:	e000e014 	.word	0xe000e014

080042b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042bc:	f7ff fb3a 	bl	8003934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042c0:	4b58      	ldr	r3, [pc, #352]	; (8004424 <pvPortMalloc+0x174>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042c8:	f000 f910 	bl	80044ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <pvPortMalloc+0x178>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 808e 	bne.w	80043f6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01d      	beq.n	800431c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80042e0:	2208      	movs	r2, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d014      	beq.n	800431c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f023 0307 	bic.w	r3, r3, #7
 80042f8:	3308      	adds	r3, #8
 80042fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <pvPortMalloc+0x6c>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	617b      	str	r3, [r7, #20]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d069      	beq.n	80043f6 <pvPortMalloc+0x146>
 8004322:	4b42      	ldr	r3, [pc, #264]	; (800442c <pvPortMalloc+0x17c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d864      	bhi.n	80043f6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800432c:	4b40      	ldr	r3, [pc, #256]	; (8004430 <pvPortMalloc+0x180>)
 800432e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004330:	4b3f      	ldr	r3, [pc, #252]	; (8004430 <pvPortMalloc+0x180>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004336:	e004      	b.n	8004342 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d903      	bls.n	8004354 <pvPortMalloc+0xa4>
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f1      	bne.n	8004338 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <pvPortMalloc+0x174>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	429a      	cmp	r2, r3
 800435c:	d04b      	beq.n	80043f6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2208      	movs	r2, #8
 8004364:	4413      	add	r3, r2
 8004366:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	2308      	movs	r3, #8
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	429a      	cmp	r2, r3
 800437e:	d91f      	bls.n	80043c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <pvPortMalloc+0xf8>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	613b      	str	r3, [r7, #16]
}
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043ba:	69b8      	ldr	r0, [r7, #24]
 80043bc:	f000 f8f8 	bl	80045b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <pvPortMalloc+0x17c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <pvPortMalloc+0x17c>)
 80043cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043ce:	4b17      	ldr	r3, [pc, #92]	; (800442c <pvPortMalloc+0x17c>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <pvPortMalloc+0x184>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d203      	bcs.n	80043e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <pvPortMalloc+0x17c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a15      	ldr	r2, [pc, #84]	; (8004434 <pvPortMalloc+0x184>)
 80043e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <pvPortMalloc+0x178>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043f6:	f7ff faab 	bl	8003950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <pvPortMalloc+0x16a>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <pvPortMalloc+0x168>
	return pvReturn;
 800441a:	69fb      	ldr	r3, [r7, #28]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20001398 	.word	0x20001398
 8004428:	200013a4 	.word	0x200013a4
 800442c:	2000139c 	.word	0x2000139c
 8004430:	20001390 	.word	0x20001390
 8004434:	200013a0 	.word	0x200013a0

08004438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d048      	beq.n	80044dc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800444a:	2308      	movs	r3, #8
 800444c:	425b      	negs	r3, r3
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <vPortFree+0xac>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <vPortFree+0x44>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	60fb      	str	r3, [r7, #12]
}
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <vPortFree+0x62>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60bb      	str	r3, [r7, #8]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <vPortFree+0xac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d019      	beq.n	80044dc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d115      	bne.n	80044dc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <vPortFree+0xac>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044c0:	f7ff fa38 	bl	8003934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <vPortFree+0xb0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4413      	add	r3, r2
 80044ce:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <vPortFree+0xb0>)
 80044d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044d2:	6938      	ldr	r0, [r7, #16]
 80044d4:	f000 f86c 	bl	80045b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80044d8:	f7ff fa3a 	bl	8003950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044dc:	bf00      	nop
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200013a4 	.word	0x200013a4
 80044e8:	2000139c 	.word	0x2000139c

080044ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044f8:	4b27      	ldr	r3, [pc, #156]	; (8004598 <prvHeapInit+0xac>)
 80044fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3307      	adds	r3, #7
 800450a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0307 	bic.w	r3, r3, #7
 8004512:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <prvHeapInit+0xac>)
 800451c:	4413      	add	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <prvHeapInit+0xb0>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <prvHeapInit+0xb0>)
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004538:	2208      	movs	r2, #8
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <prvHeapInit+0xb4>)
 800454c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <prvHeapInit+0xb4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <prvHeapInit+0xb4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <prvHeapInit+0xb4>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <prvHeapInit+0xb8>)
 800457a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <prvHeapInit+0xbc>)
 8004582:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <prvHeapInit+0xc0>)
 8004586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000790 	.word	0x20000790
 800459c:	20001390 	.word	0x20001390
 80045a0:	20001398 	.word	0x20001398
 80045a4:	200013a0 	.word	0x200013a0
 80045a8:	2000139c 	.word	0x2000139c
 80045ac:	200013a4 	.word	0x200013a4

080045b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <prvInsertBlockIntoFreeList+0xa8>)
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e002      	b.n	80045c4 <prvInsertBlockIntoFreeList+0x14>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d8f7      	bhi.n	80045be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d108      	bne.n	80045f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	441a      	add	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d118      	bne.n	8004638 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <prvInsertBlockIntoFreeList+0xac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d00d      	beq.n	800462e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e008      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <prvInsertBlockIntoFreeList+0xac>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e003      	b.n	8004640 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	20001390 	.word	0x20001390
 800465c:	20001398 	.word	0x20001398

08004660 <memset>:
 8004660:	4603      	mov	r3, r0
 8004662:	4402      	add	r2, r0
 8004664:	4293      	cmp	r3, r2
 8004666:	d100      	bne.n	800466a <memset+0xa>
 8004668:	4770      	bx	lr
 800466a:	f803 1b01 	strb.w	r1, [r3], #1
 800466e:	e7f9      	b.n	8004664 <memset+0x4>

08004670 <_reclaim_reent>:
 8004670:	4b29      	ldr	r3, [pc, #164]	; (8004718 <_reclaim_reent+0xa8>)
 8004672:	b570      	push	{r4, r5, r6, lr}
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4604      	mov	r4, r0
 8004678:	4283      	cmp	r3, r0
 800467a:	d04b      	beq.n	8004714 <_reclaim_reent+0xa4>
 800467c:	69c3      	ldr	r3, [r0, #28]
 800467e:	b143      	cbz	r3, 8004692 <_reclaim_reent+0x22>
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d144      	bne.n	8004710 <_reclaim_reent+0xa0>
 8004686:	69e3      	ldr	r3, [r4, #28]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	b111      	cbz	r1, 8004692 <_reclaim_reent+0x22>
 800468c:	4620      	mov	r0, r4
 800468e:	f000 f86b 	bl	8004768 <_free_r>
 8004692:	6961      	ldr	r1, [r4, #20]
 8004694:	b111      	cbz	r1, 800469c <_reclaim_reent+0x2c>
 8004696:	4620      	mov	r0, r4
 8004698:	f000 f866 	bl	8004768 <_free_r>
 800469c:	69e1      	ldr	r1, [r4, #28]
 800469e:	b111      	cbz	r1, 80046a6 <_reclaim_reent+0x36>
 80046a0:	4620      	mov	r0, r4
 80046a2:	f000 f861 	bl	8004768 <_free_r>
 80046a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80046a8:	b111      	cbz	r1, 80046b0 <_reclaim_reent+0x40>
 80046aa:	4620      	mov	r0, r4
 80046ac:	f000 f85c 	bl	8004768 <_free_r>
 80046b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046b2:	b111      	cbz	r1, 80046ba <_reclaim_reent+0x4a>
 80046b4:	4620      	mov	r0, r4
 80046b6:	f000 f857 	bl	8004768 <_free_r>
 80046ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80046bc:	b111      	cbz	r1, 80046c4 <_reclaim_reent+0x54>
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 f852 	bl	8004768 <_free_r>
 80046c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80046c6:	b111      	cbz	r1, 80046ce <_reclaim_reent+0x5e>
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 f84d 	bl	8004768 <_free_r>
 80046ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80046d0:	b111      	cbz	r1, 80046d8 <_reclaim_reent+0x68>
 80046d2:	4620      	mov	r0, r4
 80046d4:	f000 f848 	bl	8004768 <_free_r>
 80046d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046da:	b111      	cbz	r1, 80046e2 <_reclaim_reent+0x72>
 80046dc:	4620      	mov	r0, r4
 80046de:	f000 f843 	bl	8004768 <_free_r>
 80046e2:	6a23      	ldr	r3, [r4, #32]
 80046e4:	b1b3      	cbz	r3, 8004714 <_reclaim_reent+0xa4>
 80046e6:	4620      	mov	r0, r4
 80046e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ec:	4718      	bx	r3
 80046ee:	5949      	ldr	r1, [r1, r5]
 80046f0:	b941      	cbnz	r1, 8004704 <_reclaim_reent+0x94>
 80046f2:	3504      	adds	r5, #4
 80046f4:	69e3      	ldr	r3, [r4, #28]
 80046f6:	2d80      	cmp	r5, #128	; 0x80
 80046f8:	68d9      	ldr	r1, [r3, #12]
 80046fa:	d1f8      	bne.n	80046ee <_reclaim_reent+0x7e>
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 f833 	bl	8004768 <_free_r>
 8004702:	e7c0      	b.n	8004686 <_reclaim_reent+0x16>
 8004704:	680e      	ldr	r6, [r1, #0]
 8004706:	4620      	mov	r0, r4
 8004708:	f000 f82e 	bl	8004768 <_free_r>
 800470c:	4631      	mov	r1, r6
 800470e:	e7ef      	b.n	80046f0 <_reclaim_reent+0x80>
 8004710:	2500      	movs	r5, #0
 8004712:	e7ef      	b.n	80046f4 <_reclaim_reent+0x84>
 8004714:	bd70      	pop	{r4, r5, r6, pc}
 8004716:	bf00      	nop
 8004718:	20000060 	.word	0x20000060

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	2600      	movs	r6, #0
 8004720:	4d0c      	ldr	r5, [pc, #48]	; (8004754 <__libc_init_array+0x38>)
 8004722:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	42a6      	cmp	r6, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	f000 f870 	bl	8004810 <_init>
 8004730:	2600      	movs	r6, #0
 8004732:	4d0a      	ldr	r5, [pc, #40]	; (800475c <__libc_init_array+0x40>)
 8004734:	4c0a      	ldr	r4, [pc, #40]	; (8004760 <__libc_init_array+0x44>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	42a6      	cmp	r6, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f855 3b04 	ldr.w	r3, [r5], #4
 8004744:	4798      	blx	r3
 8004746:	3601      	adds	r6, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f855 3b04 	ldr.w	r3, [r5], #4
 800474e:	4798      	blx	r3
 8004750:	3601      	adds	r6, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	08004908 	.word	0x08004908
 8004758:	08004908 	.word	0x08004908
 800475c:	08004908 	.word	0x08004908
 8004760:	0800490c 	.word	0x0800490c

08004764 <__retarget_lock_acquire_recursive>:
 8004764:	4770      	bx	lr

08004766 <__retarget_lock_release_recursive>:
 8004766:	4770      	bx	lr

08004768 <_free_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4605      	mov	r5, r0
 800476c:	2900      	cmp	r1, #0
 800476e:	d040      	beq.n	80047f2 <_free_r+0x8a>
 8004770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004774:	1f0c      	subs	r4, r1, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfb8      	it	lt
 800477a:	18e4      	addlt	r4, r4, r3
 800477c:	f000 f83c 	bl	80047f8 <__malloc_lock>
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <_free_r+0x8c>)
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	b933      	cbnz	r3, 8004794 <_free_r+0x2c>
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	6014      	str	r4, [r2, #0]
 800478a:	4628      	mov	r0, r5
 800478c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004790:	f000 b838 	b.w	8004804 <__malloc_unlock>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d908      	bls.n	80047aa <_free_r+0x42>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	1821      	adds	r1, r4, r0
 800479c:	428b      	cmp	r3, r1
 800479e:	bf01      	itttt	eq
 80047a0:	6819      	ldreq	r1, [r3, #0]
 80047a2:	685b      	ldreq	r3, [r3, #4]
 80047a4:	1809      	addeq	r1, r1, r0
 80047a6:	6021      	streq	r1, [r4, #0]
 80047a8:	e7ed      	b.n	8004786 <_free_r+0x1e>
 80047aa:	461a      	mov	r2, r3
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b10b      	cbz	r3, 80047b4 <_free_r+0x4c>
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d9fa      	bls.n	80047aa <_free_r+0x42>
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	1850      	adds	r0, r2, r1
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	d10b      	bne.n	80047d4 <_free_r+0x6c>
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	4401      	add	r1, r0
 80047c0:	1850      	adds	r0, r2, r1
 80047c2:	4283      	cmp	r3, r0
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	d1e0      	bne.n	800478a <_free_r+0x22>
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4408      	add	r0, r1
 80047ce:	6010      	str	r0, [r2, #0]
 80047d0:	6053      	str	r3, [r2, #4]
 80047d2:	e7da      	b.n	800478a <_free_r+0x22>
 80047d4:	d902      	bls.n	80047dc <_free_r+0x74>
 80047d6:	230c      	movs	r3, #12
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	e7d6      	b.n	800478a <_free_r+0x22>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	1821      	adds	r1, r4, r0
 80047e0:	428b      	cmp	r3, r1
 80047e2:	bf01      	itttt	eq
 80047e4:	6819      	ldreq	r1, [r3, #0]
 80047e6:	685b      	ldreq	r3, [r3, #4]
 80047e8:	1809      	addeq	r1, r1, r0
 80047ea:	6021      	streq	r1, [r4, #0]
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6054      	str	r4, [r2, #4]
 80047f0:	e7cb      	b.n	800478a <_free_r+0x22>
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	200014e4 	.word	0x200014e4

080047f8 <__malloc_lock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__malloc_lock+0x8>)
 80047fa:	f7ff bfb3 	b.w	8004764 <__retarget_lock_acquire_recursive>
 80047fe:	bf00      	nop
 8004800:	200014e0 	.word	0x200014e0

08004804 <__malloc_unlock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_unlock+0x8>)
 8004806:	f7ff bfae 	b.w	8004766 <__retarget_lock_release_recursive>
 800480a:	bf00      	nop
 800480c:	200014e0 	.word	0x200014e0

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
